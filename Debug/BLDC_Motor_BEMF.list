
BLDC_Motor_BEMF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ea4  08004ea4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eac  08004eac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000014  08004ec8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004ec8  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec62  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265a  00000000  00000000  0002eca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000320f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bdf  00000000  00000000  00032d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2c8  00000000  00000000  00049977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d126  00000000  00000000  00058c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5d65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  000e5db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004e6c 	.word	0x08004e6c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08004e6c 	.word	0x08004e6c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004de:	4b2f      	ldr	r3, [pc, #188]	; (800059c <MX_ADC1_Init+0xd0>)
 80004e0:	4a2f      	ldr	r2, [pc, #188]	; (80005a0 <MX_ADC1_Init+0xd4>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e4:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_ADC1_Init+0xd0>)
 80004e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ec:	4b2b      	ldr	r3, [pc, #172]	; (800059c <MX_ADC1_Init+0xd0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_ADC1_Init+0xd0>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f8:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_ADC1_Init+0xd0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fe:	4b27      	ldr	r3, [pc, #156]	; (800059c <MX_ADC1_Init+0xd0>)
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <MX_ADC1_Init+0xd0>)
 8000508:	2200      	movs	r2, #0
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_ADC1_Init+0xd0>)
 800050e:	4a25      	ldr	r2, [pc, #148]	; (80005a4 <MX_ADC1_Init+0xd8>)
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <MX_ADC1_Init+0xd0>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000518:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_ADC1_Init+0xd0>)
 800051a:	2203      	movs	r2, #3
 800051c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_ADC1_Init+0xd0>)
 8000520:	2201      	movs	r2, #1
 8000522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <MX_ADC1_Init+0xd0>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052c:	481b      	ldr	r0, [pc, #108]	; (800059c <MX_ADC1_Init+0xd0>)
 800052e:	f001 f98d 	bl	800184c <HAL_ADC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000538:	f000 fdb6 	bl	80010a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800053c:	230d      	movs	r3, #13
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000544:	2302      	movs	r3, #2
 8000546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	4619      	mov	r1, r3
 800054c:	4813      	ldr	r0, [pc, #76]	; (800059c <MX_ADC1_Init+0xd0>)
 800054e:	f001 faa9 	bl	8001aa4 <HAL_ADC_ConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000558:	f000 fda6 	bl	80010a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800055c:	2308      	movs	r3, #8
 800055e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000560:	2302      	movs	r3, #2
 8000562:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	4619      	mov	r1, r3
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <MX_ADC1_Init+0xd0>)
 800056a:	f001 fa9b 	bl	8001aa4 <HAL_ADC_ConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000574:	f000 fd98 	bl	80010a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000578:	2307      	movs	r3, #7
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800057c:	2303      	movs	r3, #3
 800057e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_ADC1_Init+0xd0>)
 8000586:	f001 fa8d 	bl	8001aa4 <HAL_ADC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000590:	f000 fd8a 	bl	80010a8 <Error_Handler>
  }

}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000003c 	.word	0x2000003c
 80005a0:	40012000 	.word	0x40012000
 80005a4:	0f000001 	.word	0x0f000001

080005a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	; 0x30
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a4a      	ldr	r2, [pc, #296]	; (80006f0 <HAL_ADC_MspInit+0x148>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	f040 808d 	bne.w	80006e6 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	4b48      	ldr	r3, [pc, #288]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 80005d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d4:	4a47      	ldr	r2, [pc, #284]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 80005d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005da:	6453      	str	r3, [r2, #68]	; 0x44
 80005dc:	4b45      	ldr	r3, [pc, #276]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 80005de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005e4:	61bb      	str	r3, [r7, #24]
 80005e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	4b41      	ldr	r3, [pc, #260]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4a40      	ldr	r2, [pc, #256]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30
 80005f8:	4b3e      	ldr	r3, [pc, #248]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	4b3a      	ldr	r3, [pc, #232]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4a39      	ldr	r2, [pc, #228]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6313      	str	r3, [r2, #48]	; 0x30
 8000614:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	4b33      	ldr	r3, [pc, #204]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a32      	ldr	r2, [pc, #200]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
 8000630:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <HAL_ADC_MspInit+0x14c>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BEMF_U_Pin;
 800063c:	2308      	movs	r3, #8
 800063e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000640:	2303      	movs	r3, #3
 8000642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BEMF_U_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	482a      	ldr	r0, [pc, #168]	; (80006f8 <HAL_ADC_MspInit+0x150>)
 8000650:	f002 f94a 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BEMF_W_Pin;
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	2303      	movs	r3, #3
 800065a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BEMF_W_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4825      	ldr	r0, [pc, #148]	; (80006fc <HAL_ADC_MspInit+0x154>)
 8000668:	f002 f93e 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BEMF_V_Pin;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BEMF_V_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	4820      	ldr	r0, [pc, #128]	; (8000700 <HAL_ADC_MspInit+0x158>)
 8000680:	f002 f932 	bl	80028e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 8000686:	4a20      	ldr	r2, [pc, #128]	; (8000708 <HAL_ADC_MspInit+0x160>)
 8000688:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 800069e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 80006a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 80006b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 80006be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 80006cc:	f001 fd9c 	bl	8002208 <HAL_DMA_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 80006d6:	f000 fce7 	bl	80010a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 80006de:	639a      	str	r2, [r3, #56]	; 0x38
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <HAL_ADC_MspInit+0x15c>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3730      	adds	r7, #48	; 0x30
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40012000 	.word	0x40012000
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020000 	.word	0x40020000
 8000700:	40020400 	.word	0x40020400
 8000704:	20000084 	.word	0x20000084
 8000708:	40026410 	.word	0x40026410

0800070c <bldc_motor_init>:
uint32_t table_of_ms_time_to_count_in_process[2] = {200, 3000};
uint32_t time_counter = 0;
uint32_t time_to_count = 0;

void bldc_motor_init(TIM_HandleTypeDef *_tim_pwm, TIM_HandleTypeDef *_tim_com)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	bldc.tim_pwm = _tim_pwm;
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <bldc_motor_init+0x98>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6013      	str	r3, [r2, #0]
	bldc.tim_com = _tim_com;
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <bldc_motor_init+0x98>)
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	6053      	str	r3, [r2, #4]

	bldc.step_number = 6;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <bldc_motor_init+0x98>)
 8000724:	2206      	movs	r2, #6
 8000726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	bldc.speed_pulse = 0;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <bldc_motor_init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
	bldc.dir = CW;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <bldc_motor_init+0x98>)
 8000732:	2201      	movs	r2, #1
 8000734:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	bldc.flaga_next_step = 0;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <bldc_motor_init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	631a      	str	r2, [r3, #48]	; 0x30

	bldc.state = ALIGNMENT;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <bldc_motor_init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	641a      	str	r2, [r3, #64]	; 0x40
	time_to_count = table_of_ms_time_to_count_in_process[ALIGNMENT];
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <bldc_motor_init+0x9c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a18      	ldr	r2, [pc, #96]	; (80007ac <bldc_motor_init+0xa0>)
 800074a:	6013      	str	r3, [r2, #0]

	pid_init(&bldc.pid_controller, 0.05, 0, 0.01, 10);
 800074c:	210a      	movs	r1, #10
 800074e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80007b0 <bldc_motor_init+0xa4>
 8000752:	eddf 0a18 	vldr	s1, [pc, #96]	; 80007b4 <bldc_motor_init+0xa8>
 8000756:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80007b8 <bldc_motor_init+0xac>
 800075a:	4818      	ldr	r0, [pc, #96]	; (80007bc <bldc_motor_init+0xb0>)
 800075c:	f000 fca9 	bl	80010b2 <pid_init>

	bldc_motor_Config_Channel_Init();
 8000760:	f000 f902 	bl	8000968 <bldc_motor_Config_Channel_Init>

	__HAL_TIM_SET_AUTORELOAD(bldc.tim_com, ARR_TIM3_VALUE);
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <bldc_motor_init+0x98>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <bldc_motor_init+0x98>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000778:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(bldc.tim_pwm);
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <bldc_motor_init+0x98>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f002 ff0b 	bl	800359a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(bldc.tim_com);
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <bldc_motor_init+0x98>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fee2 	bl	8003552 <HAL_TIM_Base_Start>
	HAL_TIMEx_ConfigCommutationEvent_IT(bldc.tim_pwm, TIM_TS_ITR2, TIM_COMMUTATION_TRGI);
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <bldc_motor_init+0x98>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2204      	movs	r2, #4
 8000794:	2120      	movs	r1, #32
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fe03 	bl	80043a2 <HAL_TIMEx_ConfigCommutEvent_IT>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000e4 	.word	0x200000e4
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000034 	.word	0x20000034
 80007b0:	3c23d70a 	.word	0x3c23d70a
 80007b4:	00000000 	.word	0x00000000
 80007b8:	3d4ccccd 	.word	0x3d4ccccd
 80007bc:	20000128 	.word	0x20000128

080007c0 <bldc_motor_six_step_algorithm>:

void bldc_motor_six_step_algorithm(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	if(ALIGNMENT != bldc.state)
 80007c4:	4b59      	ldr	r3, [pc, #356]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d03c      	beq.n	8000846 <bldc_motor_six_step_algorithm+0x86>
	{
		bldc.actual_step_number = bldc.step_number;
 80007cc:	4b57      	ldr	r3, [pc, #348]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 80007ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b55      	ldr	r3, [pc, #340]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 80007d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		if(CW == bldc.dir)
 80007da:	4b54      	ldr	r3, [pc, #336]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 80007dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d113      	bne.n	800080e <bldc_motor_six_step_algorithm+0x4e>
		{
			bldc.step_number++;
 80007e6:	4b51      	ldr	r3, [pc, #324]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 80007e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	3301      	adds	r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b4e      	ldr	r3, [pc, #312]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 80007f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			if(bldc.step_number > 6)
 80007f8:	4b4c      	ldr	r3, [pc, #304]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 80007fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b06      	cmp	r3, #6
 8000802:	d91d      	bls.n	8000840 <bldc_motor_six_step_algorithm+0x80>
				bldc.step_number = 1;
 8000804:	4b49      	ldr	r3, [pc, #292]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 8000806:	2201      	movs	r2, #1
 8000808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800080c:	e018      	b.n	8000840 <bldc_motor_six_step_algorithm+0x80>
		}
		else if(CCW == bldc.dir)
 800080e:	4b47      	ldr	r3, [pc, #284]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 8000810:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d112      	bne.n	8000840 <bldc_motor_six_step_algorithm+0x80>
		{
			bldc.step_number--;
 800081a:	4b44      	ldr	r3, [pc, #272]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 800081c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000820:	b2db      	uxtb	r3, r3
 8000822:	3b01      	subs	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b41      	ldr	r3, [pc, #260]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 8000828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			if(bldc.step_number < 1)
 800082c:	4b3f      	ldr	r3, [pc, #252]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 800082e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d103      	bne.n	8000840 <bldc_motor_six_step_algorithm+0x80>
				bldc.step_number = 6;
 8000838:	4b3c      	ldr	r3, [pc, #240]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 800083a:	2206      	movs	r2, #6
 800083c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}

		bldc.flaga_next_step = 1;
 8000840:	4b3a      	ldr	r3, [pc, #232]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 8000842:	2201      	movs	r2, #1
 8000844:	631a      	str	r2, [r3, #48]	; 0x30
	}

	switch (bldc.step_number)
 8000846:	4b39      	ldr	r3, [pc, #228]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 8000848:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800084c:	b2db      	uxtb	r3, r3
 800084e:	3b01      	subs	r3, #1
 8000850:	2b05      	cmp	r3, #5
 8000852:	d869      	bhi.n	8000928 <bldc_motor_six_step_algorithm+0x168>
 8000854:	a201      	add	r2, pc, #4	; (adr r2, 800085c <bldc_motor_six_step_algorithm+0x9c>)
 8000856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085a:	bf00      	nop
 800085c:	08000875 	.word	0x08000875
 8000860:	08000893 	.word	0x08000893
 8000864:	080008b1 	.word	0x080008b1
 8000868:	080008cf 	.word	0x080008cf
 800086c:	080008ed 	.word	0x080008ed
 8000870:	0800090b 	.word	0x0800090b
	{
		case 1:
		{
			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
 8000874:	4b2d      	ldr	r3, [pc, #180]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 8000876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f892 	bl	80009a4 <bldc_motor_PWM_Config_Channel>
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_2);
 8000880:	2104      	movs	r1, #4
 8000882:	2050      	movs	r0, #80	; 0x50
 8000884:	f000 f8b4 	bl	80009f0 <bldc_motor_OC_Config_Channel>
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
 8000888:	2108      	movs	r1, #8
 800088a:	2040      	movs	r0, #64	; 0x40
 800088c:	f000 f8b0 	bl	80009f0 <bldc_motor_OC_Config_Channel>
		}
		break;
 8000890:	e04a      	b.n	8000928 <bldc_motor_six_step_algorithm+0x168>

		case 2:
		{
			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 8000894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f000 f883 	bl	80009a4 <bldc_motor_PWM_Config_Channel>
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_2);
 800089e:	2104      	movs	r1, #4
 80008a0:	2040      	movs	r0, #64	; 0x40
 80008a2:	f000 f8a5 	bl	80009f0 <bldc_motor_OC_Config_Channel>
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);
 80008a6:	2108      	movs	r1, #8
 80008a8:	2050      	movs	r0, #80	; 0x50
 80008aa:	f000 f8a1 	bl	80009f0 <bldc_motor_OC_Config_Channel>
		}
		break;
 80008ae:	e03b      	b.n	8000928 <bldc_motor_six_step_algorithm+0x168>

		case 3:
		{
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
 80008b0:	2100      	movs	r1, #0
 80008b2:	2040      	movs	r0, #64	; 0x40
 80008b4:	f000 f89c 	bl	80009f0 <bldc_motor_OC_Config_Channel>
			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_2);
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 80008ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008bc:	2104      	movs	r1, #4
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f870 	bl	80009a4 <bldc_motor_PWM_Config_Channel>
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);
 80008c4:	2108      	movs	r1, #8
 80008c6:	2050      	movs	r0, #80	; 0x50
 80008c8:	f000 f892 	bl	80009f0 <bldc_motor_OC_Config_Channel>
		}
		break;
 80008cc:	e02c      	b.n	8000928 <bldc_motor_six_step_algorithm+0x168>

		case 4:
		{
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2050      	movs	r0, #80	; 0x50
 80008d2:	f000 f88d 	bl	80009f0 <bldc_motor_OC_Config_Channel>
			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_2);
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 80008d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008da:	2104      	movs	r1, #4
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f861 	bl	80009a4 <bldc_motor_PWM_Config_Channel>
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
 80008e2:	2108      	movs	r1, #8
 80008e4:	2040      	movs	r0, #64	; 0x40
 80008e6:	f000 f883 	bl	80009f0 <bldc_motor_OC_Config_Channel>
		}
		break;
 80008ea:	e01d      	b.n	8000928 <bldc_motor_six_step_algorithm+0x168>

		case 5:
		{
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
 80008ec:	2100      	movs	r1, #0
 80008ee:	2050      	movs	r0, #80	; 0x50
 80008f0:	f000 f87e 	bl	80009f0 <bldc_motor_OC_Config_Channel>
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_2);
 80008f4:	2104      	movs	r1, #4
 80008f6:	2040      	movs	r0, #64	; 0x40
 80008f8:	f000 f87a 	bl	80009f0 <bldc_motor_OC_Config_Channel>
			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_3);
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 80008fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000900:	2108      	movs	r1, #8
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f84e 	bl	80009a4 <bldc_motor_PWM_Config_Channel>
		}
		break;
 8000908:	e00e      	b.n	8000928 <bldc_motor_six_step_algorithm+0x168>

		case 6:
		{
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
 800090a:	2100      	movs	r1, #0
 800090c:	2040      	movs	r0, #64	; 0x40
 800090e:	f000 f86f 	bl	80009f0 <bldc_motor_OC_Config_Channel>
			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_2);
 8000912:	2104      	movs	r1, #4
 8000914:	2050      	movs	r0, #80	; 0x50
 8000916:	f000 f86b 	bl	80009f0 <bldc_motor_OC_Config_Channel>
			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_3);
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <bldc_motor_six_step_algorithm+0x16c>)
 800091c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091e:	2108      	movs	r1, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f83f 	bl	80009a4 <bldc_motor_PWM_Config_Channel>
		}
		break;
 8000926:	bf00      	nop

	}


}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000e4 	.word	0x200000e4

08000930 <bldc_motor_set_speed>:

void bldc_motor_set_speed(uint32_t speed, direction dir)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
	if(speed > BLDC_MOTOR_MAX_SPEED)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b63      	cmp	r3, #99	; 0x63
 8000940:	d903      	bls.n	800094a <bldc_motor_set_speed+0x1a>
	{
		bldc.speed_pulse = BLDC_MOTOR_MAX_SPEED;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <bldc_motor_set_speed+0x34>)
 8000944:	2263      	movs	r2, #99	; 0x63
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
 8000948:	e002      	b.n	8000950 <bldc_motor_set_speed+0x20>
	}
	else
	{
		bldc.speed_pulse = speed;
 800094a:	4a06      	ldr	r2, [pc, #24]	; (8000964 <bldc_motor_set_speed+0x34>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6293      	str	r3, [r2, #40]	; 0x28
	}

	bldc.dir = dir;
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <bldc_motor_set_speed+0x34>)
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	200000e4 	.word	0x200000e4

08000968 <bldc_motor_Config_Channel_Init>:

void bldc_motor_Config_Channel_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	bldc.sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <bldc_motor_Config_Channel_Init+0x38>)
 800096e:	2260      	movs	r2, #96	; 0x60
 8000970:	609a      	str	r2, [r3, #8]
	bldc.sConfigOC.Pulse = 0;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <bldc_motor_Config_Channel_Init+0x38>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
	bldc.sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <bldc_motor_Config_Channel_Init+0x38>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
	bldc.sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <bldc_motor_Config_Channel_Init+0x38>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
	bldc.sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <bldc_motor_Config_Channel_Init+0x38>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
	bldc.sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <bldc_motor_Config_Channel_Init+0x38>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
	bldc.sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <bldc_motor_Config_Channel_Init+0x38>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	200000e4 	.word	0x200000e4

080009a4 <bldc_motor_PWM_Config_Channel>:

void bldc_motor_PWM_Config_Channel(uint32_t pulse, uint32_t channel)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
	bldc.sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <bldc_motor_PWM_Config_Channel+0x44>)
 80009b0:	2260      	movs	r2, #96	; 0x60
 80009b2:	609a      	str	r2, [r3, #8]
	bldc.sConfigOC.Pulse = pulse;
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <bldc_motor_PWM_Config_Channel+0x44>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_ConfigChannel(bldc.tim_pwm, &bldc.sConfigOC, channel);
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <bldc_motor_PWM_Config_Channel+0x44>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	490a      	ldr	r1, [pc, #40]	; (80009ec <bldc_motor_PWM_Config_Channel+0x48>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 f81c 	bl	8003a00 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(bldc.tim_pwm, channel);
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <bldc_motor_PWM_Config_Channel+0x44>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6839      	ldr	r1, [r7, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 fe7c 	bl	80036cc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(bldc.tim_pwm, channel);
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <bldc_motor_PWM_Config_Channel+0x44>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6839      	ldr	r1, [r7, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fcb7 	bl	800434e <HAL_TIMEx_PWMN_Start>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000e4 	.word	0x200000e4
 80009ec:	200000ec 	.word	0x200000ec

080009f0 <bldc_motor_OC_Config_Channel>:

void bldc_motor_OC_Config_Channel(uint32_t mode, uint32_t channel)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	bldc.sConfigOC.OCMode = mode;
 80009fa:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <bldc_motor_OC_Config_Channel+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6093      	str	r3, [r2, #8]
	HAL_TIM_OC_ConfigChannel(bldc.tim_pwm, &bldc.sConfigOC, channel);
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <bldc_motor_OC_Config_Channel+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	490b      	ldr	r1, [pc, #44]	; (8000a34 <bldc_motor_OC_Config_Channel+0x44>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 ff99 	bl	8003940 <HAL_TIM_OC_ConfigChannel>

	HAL_TIM_OC_Stop(bldc.tim_pwm, channel);
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <bldc_motor_OC_Config_Channel+0x40>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6839      	ldr	r1, [r7, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fde5 	bl	80035e4 <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Start(bldc.tim_pwm, channel) ;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <bldc_motor_OC_Config_Channel+0x40>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 fc6a 	bl	80042fa <HAL_TIMEx_OCN_Start>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000e4 	.word	0x200000e4
 8000a34:	200000ec 	.word	0x200000ec

08000a38 <bldc_motor_bemf_start_adc_conversion>:

void bldc_motor_bemf_start_adc_conversion(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, bldc.bemf_adc_data, BEMF_NBR_OF_CONVERSION);
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	4903      	ldr	r1, [pc, #12]	; (8000a4c <bldc_motor_bemf_start_adc_conversion+0x14>)
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <bldc_motor_bemf_start_adc_conversion+0x18>)
 8000a42:	f000 ff47 	bl	80018d4 <HAL_ADC_Start_DMA>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000118 	.word	0x20000118
 8000a50:	2000003c 	.word	0x2000003c

08000a54 <bldc_motor_bemf_calculation>:
uint32_t demag_counter = 0;
void bldc_motor_bemf_calculation(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	if(bldc.flaga_next_step == 0)
 8000a58:	4b6d      	ldr	r3, [pc, #436]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f000 80c6 	beq.w	8000bee <bldc_motor_bemf_calculation+0x19a>
		return;

	//demagnetization
	if(__HAL_TIM_GetCounter(bldc.tim_com) < (__HAL_TIM_GetAutoreload(bldc.tim_com)/10))
 8000a62:	4b6b      	ldr	r3, [pc, #428]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a6a:	4b69      	ldr	r3, [pc, #420]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	4968      	ldr	r1, [pc, #416]	; (8000c14 <bldc_motor_bemf_calculation+0x1c0>)
 8000a74:	fba1 1303 	umull	r1, r3, r1, r3
 8000a78:	08db      	lsrs	r3, r3, #3
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	f0c0 80b9 	bcc.w	8000bf2 <bldc_motor_bemf_calculation+0x19e>
		return;

	switch (bldc.actual_step_number)
 8000a80:	4b63      	ldr	r3, [pc, #396]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000a82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	2b05      	cmp	r3, #5
 8000a8c:	f200 80be 	bhi.w	8000c0c <bldc_motor_bemf_calculation+0x1b8>
 8000a90:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <bldc_motor_bemf_calculation+0x44>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000ab1 	.word	0x08000ab1
 8000a9c:	08000aeb 	.word	0x08000aeb
 8000aa0:	08000b1f 	.word	0x08000b1f
 8000aa4:	08000b53 	.word	0x08000b53
 8000aa8:	08000b87 	.word	0x08000b87
 8000aac:	08000bbb 	.word	0x08000bbb
	{
		case 1:
		{
			if(CW == bldc.dir)
 8000ab0:	4b57      	ldr	r3, [pc, #348]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000ab2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d107      	bne.n	8000acc <bldc_motor_bemf_calculation+0x78>
			{
				if(bldc.bemf_adc_data[BEMF_W_PHASE] < BEMF_THRESHOLD_DOWN)
 8000abc:	4b54      	ldr	r3, [pc, #336]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac0:	2bc7      	cmp	r3, #199	; 0xc7
 8000ac2:	f200 8098 	bhi.w	8000bf6 <bldc_motor_bemf_calculation+0x1a2>
				{
					bldc_motor_ARR_calculate();
 8000ac6:	f000 f8a7 	bl	8000c18 <bldc_motor_ARR_calculate>
				{
					bldc_motor_ARR_calculate();
				}
			}
		}
		break;
 8000aca:	e094      	b.n	8000bf6 <bldc_motor_bemf_calculation+0x1a2>
			else if(CCW == bldc.dir)
 8000acc:	4b50      	ldr	r3, [pc, #320]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000ace:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f040 808e 	bne.w	8000bf6 <bldc_motor_bemf_calculation+0x1a2>
				if(bldc.bemf_adc_data[BEMF_W_PHASE] > BEMF_THRESHOLD_UP)
 8000ada:	4b4d      	ldr	r3, [pc, #308]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ade:	2bc8      	cmp	r3, #200	; 0xc8
 8000ae0:	f240 8089 	bls.w	8000bf6 <bldc_motor_bemf_calculation+0x1a2>
					bldc_motor_ARR_calculate();
 8000ae4:	f000 f898 	bl	8000c18 <bldc_motor_ARR_calculate>
		break;
 8000ae8:	e085      	b.n	8000bf6 <bldc_motor_bemf_calculation+0x1a2>

		case 2:
		{
			if(CW == bldc.dir)
 8000aea:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000aec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <bldc_motor_bemf_calculation+0xb0>
			{
				if(bldc.bemf_adc_data[BEMF_V_PHASE] > BEMF_THRESHOLD_UP)
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000afa:	2bc8      	cmp	r3, #200	; 0xc8
 8000afc:	d97d      	bls.n	8000bfa <bldc_motor_bemf_calculation+0x1a6>
				{
					bldc_motor_ARR_calculate();
 8000afe:	f000 f88b 	bl	8000c18 <bldc_motor_ARR_calculate>
				{
					bldc_motor_ARR_calculate();
				}
			}
		}
		break;
 8000b02:	e07a      	b.n	8000bfa <bldc_motor_bemf_calculation+0x1a6>
			else if(CCW == bldc.dir)
 8000b04:	4b42      	ldr	r3, [pc, #264]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d174      	bne.n	8000bfa <bldc_motor_bemf_calculation+0x1a6>
				if(bldc.bemf_adc_data[BEMF_V_PHASE] < BEMF_THRESHOLD_DOWN)
 8000b10:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b14:	2bc7      	cmp	r3, #199	; 0xc7
 8000b16:	d870      	bhi.n	8000bfa <bldc_motor_bemf_calculation+0x1a6>
					bldc_motor_ARR_calculate();
 8000b18:	f000 f87e 	bl	8000c18 <bldc_motor_ARR_calculate>
		break;
 8000b1c:	e06d      	b.n	8000bfa <bldc_motor_bemf_calculation+0x1a6>

		case 3:
		{
			if(CW == bldc.dir)
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d106      	bne.n	8000b38 <bldc_motor_bemf_calculation+0xe4>
			{
				if(bldc.bemf_adc_data[BEMF_U_PHASE] < BEMF_THRESHOLD_DOWN)
 8000b2a:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2e:	2bc7      	cmp	r3, #199	; 0xc7
 8000b30:	d865      	bhi.n	8000bfe <bldc_motor_bemf_calculation+0x1aa>
				{
					bldc_motor_ARR_calculate();
 8000b32:	f000 f871 	bl	8000c18 <bldc_motor_ARR_calculate>
				{
					bldc_motor_ARR_calculate();
				}
			}
		}
		break;
 8000b36:	e062      	b.n	8000bfe <bldc_motor_bemf_calculation+0x1aa>
			else if(CCW == bldc.dir)
 8000b38:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d15c      	bne.n	8000bfe <bldc_motor_bemf_calculation+0x1aa>
				if(bldc.bemf_adc_data[BEMF_U_PHASE] > BEMF_THRESHOLD_UP)
 8000b44:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b48:	2bc8      	cmp	r3, #200	; 0xc8
 8000b4a:	d958      	bls.n	8000bfe <bldc_motor_bemf_calculation+0x1aa>
					bldc_motor_ARR_calculate();
 8000b4c:	f000 f864 	bl	8000c18 <bldc_motor_ARR_calculate>
		break;
 8000b50:	e055      	b.n	8000bfe <bldc_motor_bemf_calculation+0x1aa>

		case 4:
		{
			if(CW == bldc.dir)
 8000b52:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d106      	bne.n	8000b6c <bldc_motor_bemf_calculation+0x118>
			{
				if(bldc.bemf_adc_data[BEMF_W_PHASE] > BEMF_THRESHOLD_UP)
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b62:	2bc8      	cmp	r3, #200	; 0xc8
 8000b64:	d94d      	bls.n	8000c02 <bldc_motor_bemf_calculation+0x1ae>
				{
					bldc_motor_ARR_calculate();
 8000b66:	f000 f857 	bl	8000c18 <bldc_motor_ARR_calculate>
				{
					bldc_motor_ARR_calculate();
				}
			}
		}
		break;
 8000b6a:	e04a      	b.n	8000c02 <bldc_motor_bemf_calculation+0x1ae>
			else if(CCW == bldc.dir)
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d144      	bne.n	8000c02 <bldc_motor_bemf_calculation+0x1ae>
				if(bldc.bemf_adc_data[BEMF_W_PHASE] < BEMF_THRESHOLD_DOWN)
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7c:	2bc7      	cmp	r3, #199	; 0xc7
 8000b7e:	d840      	bhi.n	8000c02 <bldc_motor_bemf_calculation+0x1ae>
					bldc_motor_ARR_calculate();
 8000b80:	f000 f84a 	bl	8000c18 <bldc_motor_ARR_calculate>
		break;
 8000b84:	e03d      	b.n	8000c02 <bldc_motor_bemf_calculation+0x1ae>

		case 5:
		{
			if(CW == bldc.dir)
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d106      	bne.n	8000ba0 <bldc_motor_bemf_calculation+0x14c>
			{
				if(bldc.bemf_adc_data[BEMF_V_PHASE] < BEMF_THRESHOLD_DOWN)
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b96:	2bc7      	cmp	r3, #199	; 0xc7
 8000b98:	d835      	bhi.n	8000c06 <bldc_motor_bemf_calculation+0x1b2>
				{
					bldc_motor_ARR_calculate();
 8000b9a:	f000 f83d 	bl	8000c18 <bldc_motor_ARR_calculate>
				{
					bldc_motor_ARR_calculate();
				}
			}
		}
		break;
 8000b9e:	e032      	b.n	8000c06 <bldc_motor_bemf_calculation+0x1b2>
			else if(CCW == bldc.dir)
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000ba2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d12c      	bne.n	8000c06 <bldc_motor_bemf_calculation+0x1b2>
				if(bldc.bemf_adc_data[BEMF_V_PHASE] > BEMF_THRESHOLD_UP)
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb0:	2bc8      	cmp	r3, #200	; 0xc8
 8000bb2:	d928      	bls.n	8000c06 <bldc_motor_bemf_calculation+0x1b2>
					bldc_motor_ARR_calculate();
 8000bb4:	f000 f830 	bl	8000c18 <bldc_motor_ARR_calculate>
		break;
 8000bb8:	e025      	b.n	8000c06 <bldc_motor_bemf_calculation+0x1b2>

		case 6:
		{
			if(CW == bldc.dir)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000bbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d106      	bne.n	8000bd4 <bldc_motor_bemf_calculation+0x180>
			{
				if(bldc.bemf_adc_data[BEMF_U_PHASE] > BEMF_THRESHOLD_UP)
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bca:	2bc8      	cmp	r3, #200	; 0xc8
 8000bcc:	d91d      	bls.n	8000c0a <bldc_motor_bemf_calculation+0x1b6>
				{
					bldc_motor_ARR_calculate();
 8000bce:	f000 f823 	bl	8000c18 <bldc_motor_ARR_calculate>
				{
					bldc_motor_ARR_calculate();
				}
			}
		}
		break;
 8000bd2:	e01a      	b.n	8000c0a <bldc_motor_bemf_calculation+0x1b6>
			else if(CCW == bldc.dir)
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000bd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d114      	bne.n	8000c0a <bldc_motor_bemf_calculation+0x1b6>
				if(bldc.bemf_adc_data[BEMF_U_PHASE] < BEMF_THRESHOLD_DOWN)
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <bldc_motor_bemf_calculation+0x1bc>)
 8000be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be4:	2bc7      	cmp	r3, #199	; 0xc7
 8000be6:	d810      	bhi.n	8000c0a <bldc_motor_bemf_calculation+0x1b6>
					bldc_motor_ARR_calculate();
 8000be8:	f000 f816 	bl	8000c18 <bldc_motor_ARR_calculate>
		break;
 8000bec:	e00d      	b.n	8000c0a <bldc_motor_bemf_calculation+0x1b6>
		return;
 8000bee:	bf00      	nop
 8000bf0:	e00c      	b.n	8000c0c <bldc_motor_bemf_calculation+0x1b8>
		return;
 8000bf2:	bf00      	nop
 8000bf4:	e00a      	b.n	8000c0c <bldc_motor_bemf_calculation+0x1b8>
		break;
 8000bf6:	bf00      	nop
 8000bf8:	e008      	b.n	8000c0c <bldc_motor_bemf_calculation+0x1b8>
		break;
 8000bfa:	bf00      	nop
 8000bfc:	e006      	b.n	8000c0c <bldc_motor_bemf_calculation+0x1b8>
		break;
 8000bfe:	bf00      	nop
 8000c00:	e004      	b.n	8000c0c <bldc_motor_bemf_calculation+0x1b8>
		break;
 8000c02:	bf00      	nop
 8000c04:	e002      	b.n	8000c0c <bldc_motor_bemf_calculation+0x1b8>
		break;
 8000c06:	bf00      	nop
 8000c08:	e000      	b.n	8000c0c <bldc_motor_bemf_calculation+0x1b8>
		break;
 8000c0a:	bf00      	nop
	}
}
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000e4 	.word	0x200000e4
 8000c14:	cccccccd 	.word	0xcccccccd

08000c18 <bldc_motor_ARR_calculate>:

void bldc_motor_ARR_calculate(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
	uint32_t new_ARR_Value;
	uint32_t Bemf_Zero_Cross_Time;
	uint32_t old_ARR_Value = ARR_TIM3_VALUE;
 8000c1e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c22:	60fb      	str	r3, [r7, #12]
	int32_t diff;

	Bemf_Zero_Cross_Time = __HAL_TIM_GetCounter(bldc.tim_com);
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <bldc_motor_ARR_calculate+0x68>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	60bb      	str	r3, [r7, #8]
	old_ARR_Value = __HAL_TIM_GetAutoreload(bldc.tim_com);
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <bldc_motor_ARR_calculate+0x68>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c36:	60fb      	str	r3, [r7, #12]

	new_ARR_Value = Bemf_Zero_Cross_Time + old_ARR_Value/2;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	085b      	lsrs	r3, r3, #1
 8000c3c:	68ba      	ldr	r2, [r7, #8]
 8000c3e:	4413      	add	r3, r2
 8000c40:	607b      	str	r3, [r7, #4]

	if(STARTED == bldc.state)
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <bldc_motor_ARR_calculate+0x68>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d113      	bne.n	8000c72 <bldc_motor_ARR_calculate+0x5a>
	{
		diff = pid_calculate(&bldc.pid_controller, new_ARR_Value, old_ARR_Value);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <bldc_motor_ARR_calculate+0x6c>)
 8000c52:	f000 fa51 	bl	80010f8 <pid_calculate>
 8000c56:	6038      	str	r0, [r7, #0]
		__HAL_TIM_SetAutoreload(bldc.tim_com, old_ARR_Value + diff);
 8000c58:	6839      	ldr	r1, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <bldc_motor_ARR_calculate+0x68>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	440a      	add	r2, r1
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c66:	6839      	ldr	r1, [r7, #0]
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <bldc_motor_ARR_calculate+0x68>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	440a      	add	r2, r1
 8000c70:	60da      	str	r2, [r3, #12]
	}

	bldc.flaga_next_step = 0;
 8000c72:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <bldc_motor_ARR_calculate+0x68>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000e4 	.word	0x200000e4
 8000c84:	20000128 	.word	0x20000128

08000c88 <bldc_motor_start_pid_calculate>:

void bldc_motor_start_pid_calculate(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	int32_t diff;
	uint32_t measure = __HAL_TIM_GetAutoreload(bldc.tim_com);
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <bldc_motor_start_pid_calculate+0x44>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	607b      	str	r3, [r7, #4]

	diff = pid_calculate(&bldc.pid_controller, 1000, measure);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <bldc_motor_start_pid_calculate+0x48>)
 8000ca2:	f000 fa29 	bl	80010f8 <pid_calculate>
 8000ca6:	6038      	str	r0, [r7, #0]
	__HAL_TIM_SetAutoreload(bldc.tim_com, measure + diff);
 8000ca8:	6839      	ldr	r1, [r7, #0]
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <bldc_motor_start_pid_calculate+0x44>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	440a      	add	r2, r1
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <bldc_motor_start_pid_calculate+0x44>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	440a      	add	r2, r1
 8000cc0:	60da      	str	r2, [r3, #12]
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000e4 	.word	0x200000e4
 8000cd0:	20000128 	.word	0x20000128

08000cd4 <bldc_motor_alignment>:

void bldc_motor_alignment(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
	bldc.step_number = 6;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <bldc_motor_alignment+0x2c>)
 8000cda:	2206      	movs	r2, #6
 8000cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	__HAL_TIM_SetAutoreload(bldc.tim_com, ARR_TIM3_VALUE);
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <bldc_motor_alignment+0x2c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <bldc_motor_alignment+0x2c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000cf4:	60da      	str	r2, [r3, #12]
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	200000e4 	.word	0x200000e4

08000d04 <bldc_motor_process>:

void bldc_motor_process(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	static uint32_t time = 0;

	if(0 == time)
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <bldc_motor_process+0x9c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d104      	bne.n	8000d1a <bldc_motor_process+0x16>
		time = HAL_GetTick();
 8000d10:	f000 fd90 	bl	8001834 <HAL_GetTick>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <bldc_motor_process+0x9c>)
 8000d18:	6013      	str	r3, [r2, #0]

	if((HAL_GetTick() - time) > PROCESS_MAX_TIME)
 8000d1a:	f000 fd8b 	bl	8001834 <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <bldc_motor_process+0x9c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d933      	bls.n	8000d92 <bldc_motor_process+0x8e>
	{
		time = HAL_GetTick();
 8000d2a:	f000 fd83 	bl	8001834 <HAL_GetTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <bldc_motor_process+0x9c>)
 8000d32:	6013      	str	r3, [r2, #0]

		time_counter += PROCESS_MAX_TIME;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <bldc_motor_process+0xa0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <bldc_motor_process+0xa0>)
 8000d3c:	6013      	str	r3, [r2, #0]

		if(time_counter >= time_to_count)
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <bldc_motor_process+0xa0>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <bldc_motor_process+0xa4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d312      	bcc.n	8000d70 <bldc_motor_process+0x6c>
		{
			time_counter = 0;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <bldc_motor_process+0xa0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
			if(STARTED != bldc.state)
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <bldc_motor_process+0xa8>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d00b      	beq.n	8000d70 <bldc_motor_process+0x6c>
			{
				bldc.state++;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <bldc_motor_process+0xa8>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <bldc_motor_process+0xa8>)
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
				time_to_count = table_of_ms_time_to_count_in_process[bldc.state];
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <bldc_motor_process+0xa8>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <bldc_motor_process+0xac>)
 8000d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <bldc_motor_process+0xa4>)
 8000d6e:	6013      	str	r3, [r2, #0]
			}
		}

		switch (bldc.state)
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <bldc_motor_process+0xa8>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d00e      	beq.n	8000d96 <bldc_motor_process+0x92>
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d80e      	bhi.n	8000d9a <bldc_motor_process+0x96>
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <bldc_motor_process+0x82>
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d003      	beq.n	8000d8c <bldc_motor_process+0x88>
			case STARTED:
			{
				break;
			}
			default:
				break;
 8000d84:	e009      	b.n	8000d9a <bldc_motor_process+0x96>
				bldc_motor_alignment();
 8000d86:	f7ff ffa5 	bl	8000cd4 <bldc_motor_alignment>
				break;
 8000d8a:	e007      	b.n	8000d9c <bldc_motor_process+0x98>
				bldc_motor_start_pid_calculate();
 8000d8c:	f7ff ff7c 	bl	8000c88 <bldc_motor_start_pid_calculate>
				break;
 8000d90:	e004      	b.n	8000d9c <bldc_motor_process+0x98>
		}
	}
 8000d92:	bf00      	nop
 8000d94:	e002      	b.n	8000d9c <bldc_motor_process+0x98>
				break;
 8000d96:	bf00      	nop
 8000d98:	e000      	b.n	8000d9c <bldc_motor_process+0x98>
				break;
 8000d9a:	bf00      	nop
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000038 	.word	0x20000038
 8000da4:	20000030 	.word	0x20000030
 8000da8:	20000034 	.word	0x20000034
 8000dac:	200000e4 	.word	0x200000e4
 8000db0:	20000000 	.word	0x20000000

08000db4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_DMA_Init+0x3c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <MX_DMA_Init+0x3c>)
 8000dc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_DMA_Init+0x3c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2038      	movs	r0, #56	; 0x38
 8000ddc:	f001 f9dd 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000de0:	2038      	movs	r0, #56	; 0x38
 8000de2:	f001 f9f6 	bl	80021d2 <HAL_NVIC_EnableIRQ>

}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a3f      	ldr	r2, [pc, #252]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a38      	ldr	r2, [pc, #224]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a2a      	ldr	r2, [pc, #168]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4825      	ldr	r0, [pc, #148]	; (8000f14 <MX_GPIO_Init+0x120>)
 8000e80:	f001 feb6 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBY_RST_GPIO_Port, SBY_RST_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	4823      	ldr	r0, [pc, #140]	; (8000f18 <MX_GPIO_Init+0x124>)
 8000e8a:	f001 feb1 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2120      	movs	r1, #32
 8000e92:	4822      	ldr	r0, [pc, #136]	; (8000f1c <MX_GPIO_Init+0x128>)
 8000e94:	f001 feac 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <MX_GPIO_Init+0x12c>)
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481a      	ldr	r0, [pc, #104]	; (8000f18 <MX_GPIO_Init+0x124>)
 8000eae:	f001 fd1b 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <MX_GPIO_Init+0x120>)
 8000eca:	f001 fd0d 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SBY_RST_Pin;
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ed2:	2311      	movs	r3, #17
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SBY_RST_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_GPIO_Init+0x124>)
 8000ee6:	f001 fcff 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000eea:	2320      	movs	r3, #32
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_GPIO_Init+0x128>)
 8000f02:	f001 fcf1 	bl	80028e8 <HAL_GPIO_Init>

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	10210000 	.word	0x10210000

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f000 fc1d 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2e:	f000 f821 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f32:	f7ff ff5f 	bl	8000df4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f36:	f7ff ff3d 	bl	8000db4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f3a:	f000 fb79 	bl	8001630 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f3e:	f000 f9dd 	bl	80012fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f42:	f000 fa79 	bl	8001438 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f46:	f7ff fac1 	bl	80004cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    uint32_t dir = CW;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
    uint32_t speed = 10;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	603b      	str	r3, [r7, #0]

    bldc_motor_init(&htim1, &htim3);
 8000f52:	4906      	ldr	r1, [pc, #24]	; (8000f6c <main+0x48>)
 8000f54:	4806      	ldr	r0, [pc, #24]	; (8000f70 <main+0x4c>)
 8000f56:	f7ff fbd9 	bl	800070c <bldc_motor_init>
    bldc_motor_set_speed(speed, dir);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4619      	mov	r1, r3
 8000f60:	6838      	ldr	r0, [r7, #0]
 8000f62:	f7ff fce5 	bl	8000930 <bldc_motor_set_speed>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bldc_motor_process();
 8000f66:	f7ff fecd 	bl	8000d04 <bldc_motor_process>
 8000f6a:	e7fc      	b.n	8000f66 <main+0x42>
 8000f6c:	20000140 	.word	0x20000140
 8000f70:	20000180 	.word	0x20000180

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	2230      	movs	r2, #48	; 0x30
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 ff6a 	bl	8004e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <SystemClock_Config+0xd0>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a28      	ldr	r2, [pc, #160]	; (8001044 <SystemClock_Config+0xd0>)
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <SystemClock_Config+0xd0>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <SystemClock_Config+0xd4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <SystemClock_Config+0xd4>)
 8000fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <SystemClock_Config+0xd4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ff0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fe10 	bl	8002c24 <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800100a:	f000 f84d 	bl	80010a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2302      	movs	r3, #2
 8001014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2102      	movs	r1, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f002 f86a 	bl	8003104 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001036:	f000 f837 	bl	80010a8 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	; 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <HAL_TIMEx_CommutCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	bldc_motor_six_step_algorithm();
 8001054:	f7ff fbb4 	bl	80007c0 <bldc_motor_six_step_algorithm>

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d108      	bne.n	8001084 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		if(SET == __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1))
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	2b10      	cmp	r3, #16
 800107e:	d101      	bne.n	8001084 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			bldc_motor_bemf_start_adc_conversion();
 8001080:	f7ff fcda 	bl	8000a38 <bldc_motor_bemf_start_adc_conversion>
		}
	}
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40010000 	.word	0x40010000
 8001090:	20000180 	.word	0x20000180

08001094 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	bldc_motor_bemf_calculation();
 800109c:	f7ff fcda 	bl	8000a54 <bldc_motor_bemf_calculation>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>

080010b2 <pid_init>:
 */

#include "pid_controller.h"

void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b087      	sub	sp, #28
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6178      	str	r0, [r7, #20]
 80010ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80010be:	edc7 0a03 	vstr	s1, [r7, #12]
 80010c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80010c6:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	615a      	str	r2, [r3, #20]
}
 80010ec:	bf00      	nop
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <pid_calculate>:
	pid_data->total_error = 0;
	pid_data->previous_error = 0;
}

int pid_calculate(pid_str *pid_data, int setpoint, int process_variable)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;													//obliczenie uchybu
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;															//sumowanie uchybu
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	441a      	add	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);													//odpowiedź członu proporcjonalnego
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	ed93 7a02 	vldr	s14, [r3, #8]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);									//odpowiedź członu całkującego
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	ed93 7a03 	vldr	s14, [r3, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001146:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));		//odpowiedź członu różniczkującego
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001164:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;			//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	ed97 7a07 	vldr	s14, [r7, #28]
 8001178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	db08      	blt.n	8001194 <pid_calculate+0x9c>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118e:	edc7 7a07 	vstr	s15, [r7, #28]
 8001192:	e016      	b.n	80011c2 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	425b      	negs	r3, r3
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80011a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	d808      	bhi.n	80011c2 <pid_calculate+0xca>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	425b      	negs	r3, r3
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011be:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;											//aktualizacja zmiennej z poprzednią wartością błędu
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);														//odpowiedź regulatora
 80011c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80011cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e0:	ee17 3a90 	vmov	r3, s15
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3724      	adds	r7, #36	; 0x24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <HAL_MspInit+0x4c>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <HAL_MspInit+0x4c>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800122e:	2007      	movs	r0, #7
 8001230:	f000 ffa8 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <NMI_Handler+0x4>

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128c:	f000 fabe 	bl	800180c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800129a:	f002 fa49 	bl	8003730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000180 	.word	0x20000180

080012a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80012ae:	f002 fa3f 	bl	8003730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000180 	.word	0x20000180

080012bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <DMA2_Stream0_IRQHandler+0x10>)
 80012c2:	f001 f8a7 	bl	8002414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000084 	.word	0x20000084

080012d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <SystemInit+0x28>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <SystemInit+0x28>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SystemInit+0x28>)
 80012e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ea:	609a      	str	r2, [r3, #8]
#endif
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b092      	sub	sp, #72	; 0x48
 8001300:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2220      	movs	r2, #32
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fd98 	bl	8004e5c <memset>

  htim1.Instance = TIM1;
 800132c:	4b40      	ldr	r3, [pc, #256]	; (8001430 <MX_TIM1_Init+0x134>)
 800132e:	4a41      	ldr	r2, [pc, #260]	; (8001434 <MX_TIM1_Init+0x138>)
 8001330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 8001332:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <MX_TIM1_Init+0x134>)
 8001334:	2229      	movs	r2, #41	; 0x29
 8001336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001338:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <MX_TIM1_Init+0x134>)
 800133a:	2220      	movs	r2, #32
 800133c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800133e:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <MX_TIM1_Init+0x134>)
 8001340:	2263      	movs	r2, #99	; 0x63
 8001342:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <MX_TIM1_Init+0x134>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <MX_TIM1_Init+0x134>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b37      	ldr	r3, [pc, #220]	; (8001430 <MX_TIM1_Init+0x134>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001356:	4836      	ldr	r0, [pc, #216]	; (8001430 <MX_TIM1_Init+0x134>)
 8001358:	f002 f98c 	bl	8003674 <HAL_TIM_PWM_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001362:	f7ff fea1 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001372:	4619      	mov	r1, r3
 8001374:	482e      	ldr	r0, [pc, #184]	; (8001430 <MX_TIM1_Init+0x134>)
 8001376:	f003 f875 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001380:	f7ff fe92 	bl	80010a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001384:	2360      	movs	r3, #96	; 0x60
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	4821      	ldr	r0, [pc, #132]	; (8001430 <MX_TIM1_Init+0x134>)
 80013aa:	f002 fb29 	bl	8003a00 <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80013b4:	f7ff fe78 	bl	80010a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	2204      	movs	r2, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	481b      	ldr	r0, [pc, #108]	; (8001430 <MX_TIM1_Init+0x134>)
 80013c2:	f002 fb1d 	bl	8003a00 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80013cc:	f7ff fe6c 	bl	80010a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	2208      	movs	r2, #8
 80013d6:	4619      	mov	r1, r3
 80013d8:	4815      	ldr	r0, [pc, #84]	; (8001430 <MX_TIM1_Init+0x134>)
 80013da:	f002 fb11 	bl	8003a00 <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80013e4:	f7ff fe60 	bl	80010a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80013e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80013ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 16;
 80013f8:	2310      	movs	r3, #16
 80013fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001408:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800140c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4619      	mov	r1, r3
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_TIM1_Init+0x134>)
 8001414:	f003 f894 	bl	8004540 <HAL_TIMEx_ConfigBreakDeadTime>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800141e:	f7ff fe43 	bl	80010a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <MX_TIM1_Init+0x134>)
 8001424:	f000 f8a8 	bl	8001578 <HAL_TIM_MspPostInit>

}
 8001428:	bf00      	nop
 800142a:	3748      	adds	r7, #72	; 0x48
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000180 	.word	0x20000180
 8001434:	40010000 	.word	0x40010000

08001438 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_TIM3_Init+0x94>)
 8001456:	4a1e      	ldr	r2, [pc, #120]	; (80014d0 <MX_TIM3_Init+0x98>)
 8001458:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 254-1;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_TIM3_Init+0x94>)
 800145c:	22fd      	movs	r2, #253	; 0xfd
 800145e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_TIM3_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24000-1;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_TIM3_Init+0x94>)
 8001468:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800146c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_TIM3_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_TIM3_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_TIM3_Init+0x94>)
 800147c:	f002 f83e 	bl	80034fc <HAL_TIM_Base_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001486:	f7ff fe0f 	bl	80010a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_TIM3_Init+0x94>)
 8001498:	f002 fb78 	bl	8003b8c <HAL_TIM_ConfigClockSource>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014a2:	f7ff fe01 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014a6:	2320      	movs	r3, #32
 80014a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <MX_TIM3_Init+0x94>)
 80014b4:	f002 ffd6 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014be:	f7ff fdf3 	bl	80010a8 <Error_Handler>
  }

}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000140 	.word	0x20000140
 80014d0:	40000400 	.word	0x40000400

080014d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_TIM_PWM_MspInit+0x58>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11d      	bne.n	8001522 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_TIM_PWM_MspInit+0x5c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_TIM_PWM_MspInit+0x5c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_TIM_PWM_MspInit+0x5c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2019      	movs	r0, #25
 8001508:	f000 fe47 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800150c:	2019      	movs	r0, #25
 800150e:	f000 fe60 	bl	80021d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	201a      	movs	r0, #26
 8001518:	f000 fe3f 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800151c:	201a      	movs	r0, #26
 800151e:	f000 fe58 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40010000 	.word	0x40010000
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_TIM_Base_MspInit+0x3c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10d      	bne.n	8001562 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_TIM_Base_MspInit+0x40>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <HAL_TIM_Base_MspInit+0x40>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <HAL_TIM_Base_MspInit+0x40>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40000400 	.word	0x40000400
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a22      	ldr	r2, [pc, #136]	; (8001620 <HAL_TIM_MspPostInit+0xa8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d13d      	bne.n	8001616 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_TIM_MspPostInit+0xac>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a20      	ldr	r2, [pc, #128]	; (8001624 <HAL_TIM_MspPostInit+0xac>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <HAL_TIM_MspPostInit+0xac>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_TIM_MspPostInit+0xac>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_TIM_MspPostInit+0xac>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_TIM_MspPostInit+0xac>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14;
 80015d2:	f246 0302 	movw	r3, #24578	; 0x6002
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <HAL_TIM_MspPostInit+0xb0>)
 80015f0:	f001 f97a 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80015f4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001606:	2301      	movs	r3, #1
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <HAL_TIM_MspPostInit+0xb4>)
 8001612:	f001 f969 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40010000 	.word	0x40010000
 8001624:	40023800 	.word	0x40023800
 8001628:	40020400 	.word	0x40020400
 800162c:	40020000 	.word	0x40020000

08001630 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <MX_USART2_UART_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_USART2_UART_Init+0x4c>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_USART2_UART_Init+0x4c>)
 8001668:	f002 ffeb 	bl	8004642 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001672:	f7ff fd19 	bl	80010a8 <Error_Handler>
  }

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001c0 	.word	0x200001c0
 8001680:	40004400 	.word	0x40004400

08001684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_UART_MspInit+0x84>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12b      	bne.n	80016fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_UART_MspInit+0x88>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_UART_MspInit+0x88>)
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_UART_MspInit+0x88>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_UART_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a10      	ldr	r2, [pc, #64]	; (800170c <HAL_UART_MspInit+0x88>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_UART_MspInit+0x88>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016de:	230c      	movs	r3, #12
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ee:	2307      	movs	r3, #7
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_UART_MspInit+0x8c>)
 80016fa:	f001 f8f5 	bl	80028e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40004400 	.word	0x40004400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800171a:	e003      	b.n	8001724 <LoopCopyDataInit>

0800171c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800171e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001722:	3104      	adds	r1, #4

08001724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800172a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800172c:	d3f6      	bcc.n	800171c <CopyDataInit>
  ldr  r2, =_sbss
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001730:	e002      	b.n	8001738 <LoopFillZerobss>

08001732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001734:	f842 3b04 	str.w	r3, [r2], #4

08001738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800173a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800173c:	d3f9      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173e:	f7ff fdc7 	bl	80012d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f003 fb67 	bl	8004e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff fbed 	bl	8000f24 <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800174c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001750:	08004eb4 	.word	0x08004eb4
  ldr  r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001758:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800175c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001760:	20000204 	.word	0x20000204

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>
	...

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_Init+0x40>)
 8001772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_Init+0x40>)
 800177e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_Init+0x40>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 fcf7 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f808 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179c:	f7ff fd28 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_InitTick+0x54>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_InitTick+0x58>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fd0f 	bl	80021ee <HAL_SYSTICK_Config>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00e      	b.n	80017f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d80a      	bhi.n	80017f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f000 fcd7 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ec:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_InitTick+0x5c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000008 	.word	0x20000008
 8001804:	20000010 	.word	0x20000010
 8001808:	2000000c 	.word	0x2000000c

0800180c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000010 	.word	0x20000010
 8001830:	20000200 	.word	0x20000200

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000200 	.word	0x20000200

0800184c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e033      	b.n	80018ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7fe fe9c 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d118      	bne.n	80018bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001892:	f023 0302 	bic.w	r3, r3, #2
 8001896:	f043 0202 	orr.w	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fa22 	bl	8001ce8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
 80018ba:	e001      	b.n	80018c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Start_DMA+0x1e>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e0b1      	b.n	8001a56 <HAL_ADC_Start_DMA+0x182>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d018      	beq.n	800193a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001918:	4b51      	ldr	r3, [pc, #324]	; (8001a60 <HAL_ADC_Start_DMA+0x18c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a51      	ldr	r2, [pc, #324]	; (8001a64 <HAL_ADC_Start_DMA+0x190>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0c9a      	lsrs	r2, r3, #18
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800192c:	e002      	b.n	8001934 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	3b01      	subs	r3, #1
 8001932:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f9      	bne.n	800192e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b01      	cmp	r3, #1
 8001946:	f040 8085 	bne.w	8001a54 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001974:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001988:	d106      	bne.n	8001998 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f023 0206 	bic.w	r2, r3, #6
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	645a      	str	r2, [r3, #68]	; 0x44
 8001996:	e002      	b.n	800199e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_ADC_Start_DMA+0x194>)
 80019a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ae:	4a2f      	ldr	r2, [pc, #188]	; (8001a6c <HAL_ADC_Start_DMA+0x198>)
 80019b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	4a2e      	ldr	r2, [pc, #184]	; (8001a70 <HAL_ADC_Start_DMA+0x19c>)
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	4a2d      	ldr	r2, [pc, #180]	; (8001a74 <HAL_ADC_Start_DMA+0x1a0>)
 80019c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80019da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	334c      	adds	r3, #76	; 0x4c
 80019f6:	4619      	mov	r1, r3
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f000 fcb2 	bl	8002364 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10f      	bne.n	8001a2c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11c      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	e013      	b.n	8001a54 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <HAL_ADC_Start_DMA+0x1a4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d10e      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x180>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a52:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	08001ee1 	.word	0x08001ee1
 8001a70:	08001f9b 	.word	0x08001f9b
 8001a74:	08001fb7 	.word	0x08001fb7
 8001a78:	40012000 	.word	0x40012000

08001a7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1c>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e105      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x228>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d925      	bls.n	8001b1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68d9      	ldr	r1, [r3, #12]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b1e      	subs	r3, #30
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43da      	mvns	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	400a      	ands	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68d9      	ldr	r1, [r3, #12]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	4603      	mov	r3, r0
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4403      	add	r3, r0
 8001b0e:	3b1e      	subs	r3, #30
 8001b10:	409a      	lsls	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	e022      	b.n	8001b62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6919      	ldr	r1, [r3, #16]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	2207      	movs	r2, #7
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6919      	ldr	r1, [r3, #16]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4403      	add	r3, r0
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d824      	bhi.n	8001bb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b05      	subs	r3, #5
 8001b7c:	221f      	movs	r2, #31
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	400a      	ands	r2, r1
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b05      	subs	r3, #5
 8001ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb2:	e04c      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d824      	bhi.n	8001c06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b23      	subs	r3, #35	; 0x23
 8001bce:	221f      	movs	r2, #31
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	400a      	ands	r2, r1
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3b23      	subs	r3, #35	; 0x23
 8001bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
 8001c04:	e023      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	3b41      	subs	r3, #65	; 0x41
 8001c18:	221f      	movs	r2, #31
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	400a      	ands	r2, r1
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b41      	subs	r3, #65	; 0x41
 8001c42:	fa00 f203 	lsl.w	r2, r0, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_ADC_ConfigChannel+0x234>)
 8001c50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <HAL_ADC_ConfigChannel+0x238>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d109      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1cc>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b12      	cmp	r3, #18
 8001c62:	d105      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_ADC_ConfigChannel+0x238>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d123      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x21e>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d003      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x1e6>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b11      	cmp	r3, #17
 8001c88:	d11b      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d111      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_ADC_ConfigChannel+0x23c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_ADC_ConfigChannel+0x240>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	0c9a      	lsrs	r2, r3, #18
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cb4:	e002      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f9      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40012300 	.word	0x40012300
 8001cdc:	40012000 	.word	0x40012000
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	431bde83 	.word	0x431bde83

08001ce8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf0:	4b79      	ldr	r3, [pc, #484]	; (8001ed8 <ADC_Init+0x1f0>)
 8001cf2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	021a      	lsls	r2, r3, #8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6899      	ldr	r1, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	4a58      	ldr	r2, [pc, #352]	; (8001edc <ADC_Init+0x1f4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d022      	beq.n	8001dc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6899      	ldr	r1, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6899      	ldr	r1, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	e00f      	b.n	8001de6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0202 	bic.w	r2, r2, #2
 8001df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6899      	ldr	r1, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7e1b      	ldrb	r3, [r3, #24]
 8001e00:	005a      	lsls	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01b      	beq.n	8001e4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6859      	ldr	r1, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	035a      	lsls	r2, r3, #13
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	e007      	b.n	8001e5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	051a      	lsls	r2, r3, #20
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6899      	ldr	r1, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e9e:	025a      	lsls	r2, r3, #9
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6899      	ldr	r1, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	029a      	lsls	r2, r3, #10
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	609a      	str	r2, [r3, #8]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40012300 	.word	0x40012300
 8001edc:	0f000001 	.word	0x0f000001

08001ee0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d13c      	bne.n	8001f74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d12b      	bne.n	8001f6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d127      	bne.n	8001f6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d119      	bne.n	8001f6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0220 	bic.w	r2, r2, #32
 8001f46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff f891 	bl	8001094 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f72:	e00e      	b.n	8001f92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f7ff fd85 	bl	8001a90 <HAL_ADC_ErrorCallback>
}
 8001f86:	e004      	b.n	8001f92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff fd67 	bl	8001a7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f043 0204 	orr.w	r2, r3, #4
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff fd5a 	bl	8001a90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff3e 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff31 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff fb0e 	bl	8001834 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e099      	b.n	8002358 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002244:	e00f      	b.n	8002266 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002246:	f7ff faf5 	bl	8001834 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b05      	cmp	r3, #5
 8002252:	d908      	bls.n	8002266 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2203      	movs	r2, #3
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e078      	b.n	8002358 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e8      	bne.n	8002246 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4b38      	ldr	r3, [pc, #224]	; (8002360 <HAL_DMA_Init+0x158>)
 8002280:	4013      	ands	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d107      	bne.n	80022d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	4313      	orrs	r3, r2
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f023 0307 	bic.w	r3, r3, #7
 80022e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d117      	bne.n	800232a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fa6f 	bl	80027f0 <DMA_CheckFifoParam>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002326:	2301      	movs	r3, #1
 8002328:	e016      	b.n	8002358 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fa26 	bl	8002784 <DMA_CalcBaseAndBitshift>
 8002338:	4603      	mov	r3, r0
 800233a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	223f      	movs	r2, #63	; 0x3f
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	f010803f 	.word	0xf010803f

08002364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_DMA_Start_IT+0x26>
 8002386:	2302      	movs	r3, #2
 8002388:	e040      	b.n	800240c <HAL_DMA_Start_IT+0xa8>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d12f      	bne.n	80023fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f9b8 	bl	8002728 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	223f      	movs	r2, #63	; 0x3f
 80023be:	409a      	lsls	r2, r3
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0216 	orr.w	r2, r2, #22
 80023d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0208 	orr.w	r2, r2, #8
 80023ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e005      	b.n	800240a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002406:	2302      	movs	r3, #2
 8002408:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800240a:	7dfb      	ldrb	r3, [r7, #23]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002420:	4b92      	ldr	r3, [pc, #584]	; (800266c <HAL_DMA_IRQHandler+0x258>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a92      	ldr	r2, [pc, #584]	; (8002670 <HAL_DMA_IRQHandler+0x25c>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	0a9b      	lsrs	r3, r3, #10
 800242c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	2208      	movs	r2, #8
 8002440:	409a      	lsls	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01a      	beq.n	8002480 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0204 	bic.w	r2, r2, #4
 8002466:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	2208      	movs	r2, #8
 800246e:	409a      	lsls	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	2201      	movs	r2, #1
 8002486:	409a      	lsls	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d012      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00b      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	2201      	movs	r2, #1
 80024a4:	409a      	lsls	r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f043 0202 	orr.w	r2, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	2204      	movs	r2, #4
 80024bc:	409a      	lsls	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d012      	beq.n	80024ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00b      	beq.n	80024ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	2204      	movs	r2, #4
 80024da:	409a      	lsls	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f043 0204 	orr.w	r2, r3, #4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	2210      	movs	r2, #16
 80024f2:	409a      	lsls	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d043      	beq.n	8002584 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d03c      	beq.n	8002584 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	2210      	movs	r2, #16
 8002510:	409a      	lsls	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d018      	beq.n	8002556 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d108      	bne.n	8002544 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d024      	beq.n	8002584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
 8002542:	e01f      	b.n	8002584 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01b      	beq.n	8002584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
 8002554:	e016      	b.n	8002584 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d107      	bne.n	8002574 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0208 	bic.w	r2, r2, #8
 8002572:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	2220      	movs	r2, #32
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 808e 	beq.w	80026b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8086 	beq.w	80026b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	2220      	movs	r2, #32
 80025ac:	409a      	lsls	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d136      	bne.n	800262c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0216 	bic.w	r2, r2, #22
 80025cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_DMA_IRQHandler+0x1da>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0208 	bic.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	223f      	movs	r2, #63	; 0x3f
 8002604:	409a      	lsls	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261e:	2b00      	cmp	r3, #0
 8002620:	d07d      	beq.n	800271e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	4798      	blx	r3
        }
        return;
 800262a:	e078      	b.n	800271e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d01c      	beq.n	8002674 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d108      	bne.n	800265a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	2b00      	cmp	r3, #0
 800264e:	d030      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
 8002658:	e02b      	b.n	80026b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d027      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
 800266a:	e022      	b.n	80026b2 <HAL_DMA_IRQHandler+0x29e>
 800266c:	20000008 	.word	0x20000008
 8002670:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10f      	bne.n	80026a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0210 	bic.w	r2, r2, #16
 8002690:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d032      	beq.n	8002720 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d022      	beq.n	800270c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2205      	movs	r2, #5
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3301      	adds	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d307      	bcc.n	80026fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f2      	bne.n	80026de <HAL_DMA_IRQHandler+0x2ca>
 80026f8:	e000      	b.n	80026fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
 800271c:	e000      	b.n	8002720 <HAL_DMA_IRQHandler+0x30c>
        return;
 800271e:	bf00      	nop
    }
  }
}
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop

08002728 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002744:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b40      	cmp	r3, #64	; 0x40
 8002754:	d108      	bne.n	8002768 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002766:	e007      	b.n	8002778 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	60da      	str	r2, [r3, #12]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	3b10      	subs	r3, #16
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800279e:	4a13      	ldr	r2, [pc, #76]	; (80027ec <DMA_CalcBaseAndBitshift+0x68>)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d909      	bls.n	80027c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	1d1a      	adds	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	659a      	str	r2, [r3, #88]	; 0x58
 80027c4:	e007      	b.n	80027d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	aaaaaaab 	.word	0xaaaaaaab
 80027ec:	08004e9c 	.word	0x08004e9c

080027f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11f      	bne.n	800284a <DMA_CheckFifoParam+0x5a>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d856      	bhi.n	80028be <DMA_CheckFifoParam+0xce>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <DMA_CheckFifoParam+0x28>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002829 	.word	0x08002829
 800281c:	0800283b 	.word	0x0800283b
 8002820:	08002829 	.word	0x08002829
 8002824:	080028bf 	.word	0x080028bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d046      	beq.n	80028c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002838:	e043      	b.n	80028c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002842:	d140      	bne.n	80028c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002848:	e03d      	b.n	80028c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002852:	d121      	bne.n	8002898 <DMA_CheckFifoParam+0xa8>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d837      	bhi.n	80028ca <DMA_CheckFifoParam+0xda>
 800285a:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <DMA_CheckFifoParam+0x70>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	08002871 	.word	0x08002871
 8002864:	08002877 	.word	0x08002877
 8002868:	08002871 	.word	0x08002871
 800286c:	08002889 	.word	0x08002889
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
      break;
 8002874:	e030      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d025      	beq.n	80028ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002886:	e022      	b.n	80028ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002890:	d11f      	bne.n	80028d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002896:	e01c      	b.n	80028d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d903      	bls.n	80028a6 <DMA_CheckFifoParam+0xb6>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d003      	beq.n	80028ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028a4:	e018      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
      break;
 80028aa:	e015      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00e      	beq.n	80028d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	e00b      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
      break;
 80028be:	bf00      	nop
 80028c0:	e00a      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;
 80028c2:	bf00      	nop
 80028c4:	e008      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;
 80028c6:	bf00      	nop
 80028c8:	e006      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ca:	bf00      	nop
 80028cc:	e004      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ce:	bf00      	nop
 80028d0:	e002      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
    }
  } 
  
  return status; 
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e159      	b.n	8002bb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	429a      	cmp	r2, r3
 800291e:	f040 8148 	bne.w	8002bb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d00b      	beq.n	8002942 <HAL_GPIO_Init+0x5a>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002936:	2b11      	cmp	r3, #17
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b12      	cmp	r3, #18
 8002940:	d130      	bne.n	80029a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	2203      	movs	r2, #3
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 0201 	and.w	r2, r3, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0xfc>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b12      	cmp	r3, #18
 80029e2:	d123      	bne.n	8002a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	08da      	lsrs	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3208      	adds	r2, #8
 80029ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	220f      	movs	r2, #15
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	08da      	lsrs	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3208      	adds	r2, #8
 8002a26:	69b9      	ldr	r1, [r7, #24]
 8002a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	2203      	movs	r2, #3
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0203 	and.w	r2, r3, #3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80a2 	beq.w	8002bb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_GPIO_Init+0x2e8>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a56      	ldr	r2, [pc, #344]	; (8002bd0 <HAL_GPIO_Init+0x2e8>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b54      	ldr	r3, [pc, #336]	; (8002bd0 <HAL_GPIO_Init+0x2e8>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a8a:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_GPIO_Init+0x2ec>)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a49      	ldr	r2, [pc, #292]	; (8002bd8 <HAL_GPIO_Init+0x2f0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d019      	beq.n	8002aea <HAL_GPIO_Init+0x202>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a48      	ldr	r2, [pc, #288]	; (8002bdc <HAL_GPIO_Init+0x2f4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_Init+0x1fe>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a47      	ldr	r2, [pc, #284]	; (8002be0 <HAL_GPIO_Init+0x2f8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_GPIO_Init+0x1fa>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a46      	ldr	r2, [pc, #280]	; (8002be4 <HAL_GPIO_Init+0x2fc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_Init+0x1f6>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a45      	ldr	r2, [pc, #276]	; (8002be8 <HAL_GPIO_Init+0x300>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_GPIO_Init+0x1f2>
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	e008      	b.n	8002aec <HAL_GPIO_Init+0x204>
 8002ada:	2307      	movs	r3, #7
 8002adc:	e006      	b.n	8002aec <HAL_GPIO_Init+0x204>
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e004      	b.n	8002aec <HAL_GPIO_Init+0x204>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e002      	b.n	8002aec <HAL_GPIO_Init+0x204>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_GPIO_Init+0x204>
 8002aea:	2300      	movs	r3, #0
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	f002 0203 	and.w	r2, r2, #3
 8002af2:	0092      	lsls	r2, r2, #2
 8002af4:	4093      	lsls	r3, r2
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002afc:	4935      	ldr	r1, [pc, #212]	; (8002bd4 <HAL_GPIO_Init+0x2ec>)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	3302      	adds	r3, #2
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2e:	4a2f      	ldr	r2, [pc, #188]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b58:	4a24      	ldr	r2, [pc, #144]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b82:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bac:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b0f      	cmp	r3, #15
 8002bbc:	f67f aea2 	bls.w	8002904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	40020000 	.word	0x40020000
 8002bdc:	40020400 	.word	0x40020400
 8002be0:	40020800 	.word	0x40020800
 8002be4:	40020c00 	.word	0x40020c00
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40013c00 	.word	0x40013c00

08002bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	807b      	strh	r3, [r7, #2]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c00:	787b      	ldrb	r3, [r7, #1]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c0c:	e003      	b.n	8002c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c0e:	887b      	ldrh	r3, [r7, #2]
 8002c10:	041a      	lsls	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	619a      	str	r2, [r3, #24]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e25b      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d075      	beq.n	8002d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c42:	4ba3      	ldr	r3, [pc, #652]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d00c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4ba0      	ldr	r3, [pc, #640]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d112      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5a:	4b9d      	ldr	r3, [pc, #628]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c66:	d10b      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	4b99      	ldr	r3, [pc, #612]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d05b      	beq.n	8002d2c <HAL_RCC_OscConfig+0x108>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d157      	bne.n	8002d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e236      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x74>
 8002c8a:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a90      	ldr	r2, [pc, #576]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e01d      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x98>
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a8a      	ldr	r2, [pc, #552]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a87      	ldr	r2, [pc, #540]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	4b84      	ldr	r3, [pc, #528]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a83      	ldr	r2, [pc, #524]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a80      	ldr	r2, [pc, #512]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fdaa 	bl	8001834 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fda6 	bl	8001834 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e1fb      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xc0>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fd96 	bl	8001834 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fd92 	bl	8001834 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1e7      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0xe8>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d063      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3a:	4b65      	ldr	r3, [pc, #404]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b62      	ldr	r3, [pc, #392]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d11c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d52:	4b5f      	ldr	r3, [pc, #380]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	4b5c      	ldr	r3, [pc, #368]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x152>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e1bb      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4952      	ldr	r1, [pc, #328]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	e03a      	b.n	8002e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d94:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <HAL_RCC_OscConfig+0x2b0>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fd4b 	bl	8001834 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe fd47 	bl	8001834 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e19c      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	4b46      	ldr	r3, [pc, #280]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4940      	ldr	r1, [pc, #256]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e015      	b.n	8002e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <HAL_RCC_OscConfig+0x2b0>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fd2a 	bl	8001834 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fe fd26 	bl	8001834 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e17b      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d030      	beq.n	8002e70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_RCC_OscConfig+0x2b4>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fd0a 	bl	8001834 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fe fd06 	bl	8001834 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e15b      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x200>
 8002e42:	e015      	b.n	8002e70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e44:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCC_OscConfig+0x2b4>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fcf3 	bl	8001834 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fe fcef 	bl	8001834 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e144      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a0 	beq.w	8002fbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x2b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d121      	bne.n	8002efe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCC_OscConfig+0x2b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_RCC_OscConfig+0x2b8>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec6:	f7fe fcb5 	bl	8001834 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	e011      	b.n	8002ef2 <HAL_RCC_OscConfig+0x2ce>
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	42470000 	.word	0x42470000
 8002ed8:	42470e80 	.word	0x42470e80
 8002edc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee0:	f7fe fca8 	bl	8001834 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0fd      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b81      	ldr	r3, [pc, #516]	; (80030f8 <HAL_RCC_OscConfig+0x4d4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2f0>
 8002f06:	4b7d      	ldr	r3, [pc, #500]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a7c      	ldr	r2, [pc, #496]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	e01c      	b.n	8002f4e <HAL_RCC_OscConfig+0x32a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCC_OscConfig+0x312>
 8002f1c:	4b77      	ldr	r3, [pc, #476]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a76      	ldr	r2, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	4b74      	ldr	r3, [pc, #464]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a73      	ldr	r2, [pc, #460]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0x32a>
 8002f36:	4b71      	ldr	r3, [pc, #452]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a70      	ldr	r2, [pc, #448]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	4b6e      	ldr	r3, [pc, #440]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a6d      	ldr	r2, [pc, #436]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d015      	beq.n	8002f82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fe fc6d 	bl	8001834 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe fc69 	bl	8001834 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0bc      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	4b61      	ldr	r3, [pc, #388]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ee      	beq.n	8002f5e <HAL_RCC_OscConfig+0x33a>
 8002f80:	e014      	b.n	8002fac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fc57 	bl	8001834 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe fc53 	bl	8001834 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0a6      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	4b56      	ldr	r3, [pc, #344]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ee      	bne.n	8002f8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb2:	4b52      	ldr	r3, [pc, #328]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a51      	ldr	r2, [pc, #324]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8092 	beq.w	80030ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc8:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d05c      	beq.n	800308e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d141      	bne.n	8003060 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b48      	ldr	r3, [pc, #288]	; (8003100 <HAL_RCC_OscConfig+0x4dc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fc27 	bl	8001834 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fe fc23 	bl	8001834 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e078      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffc:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f0      	bne.n	8002fea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	061b      	lsls	r3, r3, #24
 800302c:	4933      	ldr	r1, [pc, #204]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003032:	4b33      	ldr	r3, [pc, #204]	; (8003100 <HAL_RCC_OscConfig+0x4dc>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fbfc 	bl	8001834 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe fbf8 	bl	8001834 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e04d      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x41c>
 800305e:	e045      	b.n	80030ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <HAL_RCC_OscConfig+0x4dc>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fe fbe5 	bl	8001834 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306e:	f7fe fbe1 	bl	8001834 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e036      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f0      	bne.n	800306e <HAL_RCC_OscConfig+0x44a>
 800308c:	e02e      	b.n	80030ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e029      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800309a:	4b18      	ldr	r3, [pc, #96]	; (80030fc <HAL_RCC_OscConfig+0x4d8>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d11c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d115      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030c2:	4013      	ands	r3, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d10d      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d106      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40007000 	.word	0x40007000
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470060 	.word	0x42470060

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0cc      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b68      	ldr	r3, [pc, #416]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d90c      	bls.n	8003140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b65      	ldr	r3, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d044      	beq.n	8003224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d119      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e067      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4934      	ldr	r1, [pc, #208]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7fe fb1e 	bl	8001834 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fe fb1a 	bl	8001834 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e04f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d20c      	bcs.n	800324c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fa7e 	bl	80017ac <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08004e84 	.word	0x08004e84
 80032c8:	20000008 	.word	0x20000008
 80032cc:	2000000c 	.word	0x2000000c

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	2300      	movs	r3, #0
 80032e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e8:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d00d      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x40>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	f200 80bd 	bhi.w	8003474 <HAL_RCC_GetSysClockFreq+0x1a4>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x3a>
 8003302:	e0b7      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b61      	ldr	r3, [pc, #388]	; (800348c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003306:	60bb      	str	r3, [r7, #8]
       break;
 8003308:	e0b7      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330a:	4b61      	ldr	r3, [pc, #388]	; (8003490 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800330c:	60bb      	str	r3, [r7, #8]
      break;
 800330e:	e0b4      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003310:	4b5d      	ldr	r3, [pc, #372]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003318:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800331a:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d04d      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	461a      	mov	r2, r3
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	ea02 0800 	and.w	r8, r2, r0
 800333e:	ea03 0901 	and.w	r9, r3, r1
 8003342:	4640      	mov	r0, r8
 8003344:	4649      	mov	r1, r9
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	014b      	lsls	r3, r1, #5
 8003350:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003354:	0142      	lsls	r2, r0, #5
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	ebb0 0008 	subs.w	r0, r0, r8
 800335e:	eb61 0109 	sbc.w	r1, r1, r9
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	018b      	lsls	r3, r1, #6
 800336c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003370:	0182      	lsls	r2, r0, #6
 8003372:	1a12      	subs	r2, r2, r0
 8003374:	eb63 0301 	sbc.w	r3, r3, r1
 8003378:	f04f 0000 	mov.w	r0, #0
 800337c:	f04f 0100 	mov.w	r1, #0
 8003380:	00d9      	lsls	r1, r3, #3
 8003382:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003386:	00d0      	lsls	r0, r2, #3
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	eb12 0208 	adds.w	r2, r2, r8
 8003390:	eb43 0309 	adc.w	r3, r3, r9
 8003394:	f04f 0000 	mov.w	r0, #0
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	0259      	lsls	r1, r3, #9
 800339e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033a2:	0250      	lsls	r0, r2, #9
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	f7fc ff0e 	bl	80001d4 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	e04a      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c2:	4b31      	ldr	r3, [pc, #196]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	461a      	mov	r2, r3
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	ea02 0400 	and.w	r4, r2, r0
 80033da:	ea03 0501 	and.w	r5, r3, r1
 80033de:	4620      	mov	r0, r4
 80033e0:	4629      	mov	r1, r5
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	014b      	lsls	r3, r1, #5
 80033ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033f0:	0142      	lsls	r2, r0, #5
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	1b00      	subs	r0, r0, r4
 80033f8:	eb61 0105 	sbc.w	r1, r1, r5
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	018b      	lsls	r3, r1, #6
 8003406:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800340a:	0182      	lsls	r2, r0, #6
 800340c:	1a12      	subs	r2, r2, r0
 800340e:	eb63 0301 	sbc.w	r3, r3, r1
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	00d9      	lsls	r1, r3, #3
 800341c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003420:	00d0      	lsls	r0, r2, #3
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	1912      	adds	r2, r2, r4
 8003428:	eb45 0303 	adc.w	r3, r5, r3
 800342c:	f04f 0000 	mov.w	r0, #0
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	0299      	lsls	r1, r3, #10
 8003436:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800343a:	0290      	lsls	r0, r2, #10
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	461a      	mov	r2, r3
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	f7fc fec2 	bl	80001d4 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	3301      	adds	r3, #1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	60bb      	str	r3, [r7, #8]
      break;
 8003472:	e002      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003476:	60bb      	str	r3, [r7, #8]
      break;
 8003478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347a:	68bb      	ldr	r3, [r7, #8]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	00f42400 	.word	0x00f42400
 8003490:	007a1200 	.word	0x007a1200

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000008 	.word	0x20000008

080034ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034b0:	f7ff fff0 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0a9b      	lsrs	r3, r3, #10
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08004e94 	.word	0x08004e94

080034d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034d8:	f7ff ffdc 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0b5b      	lsrs	r3, r3, #13
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4903      	ldr	r1, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	08004e94 	.word	0x08004e94

080034fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e01d      	b.n	800354a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f806 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f000 fc12 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d007      	beq.n	8003584 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b06      	cmp	r3, #6
 80035c2:	d007      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	6839      	ldr	r1, [r7, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fe5a 	bl	80042b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <HAL_TIM_OC_Stop+0x8c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d117      	bne.n	8003636 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10f      	bne.n	8003636 <HAL_TIM_OC_Stop+0x52>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a1a      	ldr	r2, [r3, #32]
 800361c:	f240 4344 	movw	r3, #1092	; 0x444
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d107      	bne.n	8003636 <HAL_TIM_OC_Stop+0x52>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <HAL_TIM_OC_Stop+0x82>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6a1a      	ldr	r2, [r3, #32]
 800364c:	f240 4344 	movw	r3, #1092	; 0x444
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <HAL_TIM_OC_Stop+0x82>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40010000 	.word	0x40010000

08003674 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e01d      	b.n	80036c2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd ff1a 	bl	80014d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f000 fb56 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fde6 	bl	80042b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_TIM_PWM_Start+0x60>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d107      	bne.n	80036fe <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b06      	cmp	r3, #6
 800370e:	d007      	beq.n	8003720 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40010000 	.word	0x40010000

08003730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b02      	cmp	r3, #2
 8003744:	d122      	bne.n	800378c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d11b      	bne.n	800378c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0202 	mvn.w	r2, #2
 800375c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fad8 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 faca 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fadb 	bl	8003d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b04      	cmp	r3, #4
 8003798:	d122      	bne.n	80037e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d11b      	bne.n	80037e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0204 	mvn.w	r2, #4
 80037b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 faae 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 faa0 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fab1 	bl	8003d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0208 	mvn.w	r2, #8
 8003804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2204      	movs	r2, #4
 800380a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa84 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa76 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fa87 	bl	8003d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b10      	cmp	r3, #16
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b10      	cmp	r3, #16
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0210 	mvn.w	r2, #16
 8003858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2208      	movs	r2, #8
 800385e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa5a 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa4c 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fa5d 	bl	8003d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d10e      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d107      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0201 	mvn.w	r2, #1
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fd fbd6 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	2b80      	cmp	r3, #128	; 0x80
 80038c0:	d10e      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d107      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fe82 	bl	80045e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d10e      	bne.n	800390c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d107      	bne.n	800390c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa22 	bl	8003d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b20      	cmp	r3, #32
 8003918:	d10e      	bne.n	8003938 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b20      	cmp	r3, #32
 8003926:	d107      	bne.n	8003938 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0220 	mvn.w	r2, #32
 8003930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fb8a 	bl	800104c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_TIM_OC_ConfigChannel+0x1a>
 8003956:	2302      	movs	r3, #2
 8003958:	e04e      	b.n	80039f8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b0c      	cmp	r3, #12
 800396e:	d839      	bhi.n	80039e4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003970:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <HAL_TIM_OC_ConfigChannel+0x38>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	080039ad 	.word	0x080039ad
 800397c:	080039e5 	.word	0x080039e5
 8003980:	080039e5 	.word	0x080039e5
 8003984:	080039e5 	.word	0x080039e5
 8003988:	080039bb 	.word	0x080039bb
 800398c:	080039e5 	.word	0x080039e5
 8003990:	080039e5 	.word	0x080039e5
 8003994:	080039e5 	.word	0x080039e5
 8003998:	080039c9 	.word	0x080039c9
 800399c:	080039e5 	.word	0x080039e5
 80039a0:	080039e5 	.word	0x080039e5
 80039a4:	080039e5 	.word	0x080039e5
 80039a8:	080039d7 	.word	0x080039d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fa56 	bl	8003e64 <TIM_OC1_SetConfig>
      break;
 80039b8:	e015      	b.n	80039e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fab5 	bl	8003f30 <TIM_OC2_SetConfig>
      break;
 80039c6:	e00e      	b.n	80039e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fb1a 	bl	8004008 <TIM_OC3_SetConfig>
      break;
 80039d4:	e007      	b.n	80039e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fb7d 	bl	80040dc <TIM_OC4_SetConfig>
      break;
 80039e2:	e000      	b.n	80039e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80039e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e0b4      	b.n	8003b84 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	f200 809f 	bhi.w	8003b70 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a32:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a6d 	.word	0x08003a6d
 8003a3c:	08003b71 	.word	0x08003b71
 8003a40:	08003b71 	.word	0x08003b71
 8003a44:	08003b71 	.word	0x08003b71
 8003a48:	08003aad 	.word	0x08003aad
 8003a4c:	08003b71 	.word	0x08003b71
 8003a50:	08003b71 	.word	0x08003b71
 8003a54:	08003b71 	.word	0x08003b71
 8003a58:	08003aef 	.word	0x08003aef
 8003a5c:	08003b71 	.word	0x08003b71
 8003a60:	08003b71 	.word	0x08003b71
 8003a64:	08003b71 	.word	0x08003b71
 8003a68:	08003b2f 	.word	0x08003b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f9f6 	bl	8003e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0208 	orr.w	r2, r2, #8
 8003a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0204 	bic.w	r2, r2, #4
 8003a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6999      	ldr	r1, [r3, #24]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	619a      	str	r2, [r3, #24]
      break;
 8003aaa:	e062      	b.n	8003b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fa3c 	bl	8003f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6999      	ldr	r1, [r3, #24]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	021a      	lsls	r2, r3, #8
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	619a      	str	r2, [r3, #24]
      break;
 8003aec:	e041      	b.n	8003b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fa87 	bl	8004008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0208 	orr.w	r2, r2, #8
 8003b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0204 	bic.w	r2, r2, #4
 8003b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69d9      	ldr	r1, [r3, #28]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	61da      	str	r2, [r3, #28]
      break;
 8003b2c:	e021      	b.n	8003b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fad1 	bl	80040dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69d9      	ldr	r1, [r3, #28]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	021a      	lsls	r2, r3, #8
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	61da      	str	r2, [r3, #28]
      break;
 8003b6e:	e000      	b.n	8003b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b70:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_TIM_ConfigClockSource+0x18>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e0b3      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x180>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bdc:	d03e      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0xd0>
 8003bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be2:	f200 8087 	bhi.w	8003cf4 <HAL_TIM_ConfigClockSource+0x168>
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bea:	f000 8085 	beq.w	8003cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf2:	d87f      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x168>
 8003bf4:	2b70      	cmp	r3, #112	; 0x70
 8003bf6:	d01a      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0xa2>
 8003bf8:	2b70      	cmp	r3, #112	; 0x70
 8003bfa:	d87b      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x168>
 8003bfc:	2b60      	cmp	r3, #96	; 0x60
 8003bfe:	d050      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x116>
 8003c00:	2b60      	cmp	r3, #96	; 0x60
 8003c02:	d877      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x168>
 8003c04:	2b50      	cmp	r3, #80	; 0x50
 8003c06:	d03c      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0xf6>
 8003c08:	2b50      	cmp	r3, #80	; 0x50
 8003c0a:	d873      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x168>
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d058      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x136>
 8003c10:	2b40      	cmp	r3, #64	; 0x40
 8003c12:	d86f      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x168>
 8003c14:	2b30      	cmp	r3, #48	; 0x30
 8003c16:	d064      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x156>
 8003c18:	2b30      	cmp	r3, #48	; 0x30
 8003c1a:	d86b      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x168>
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d060      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x156>
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d867      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x168>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d05c      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x156>
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d05a      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c2c:	e062      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f000 fb17 	bl	8004270 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	609a      	str	r2, [r3, #8]
      break;
 8003c5a:	e04e      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6899      	ldr	r1, [r3, #8]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f000 fb00 	bl	8004270 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c7e:	609a      	str	r2, [r3, #8]
      break;
 8003c80:	e03b      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 fa74 	bl	800417c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2150      	movs	r1, #80	; 0x50
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 facd 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e02b      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f000 fa93 	bl	80041da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2160      	movs	r1, #96	; 0x60
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fabd 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003cc0:	e01b      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f000 fa54 	bl	800417c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2140      	movs	r1, #64	; 0x40
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 faad 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003ce0:	e00b      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f000 faa4 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cf8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a34      	ldr	r2, [pc, #208]	; (8003e48 <TIM_Base_SetConfig+0xe4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00f      	beq.n	8003d9c <TIM_Base_SetConfig+0x38>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d00b      	beq.n	8003d9c <TIM_Base_SetConfig+0x38>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a31      	ldr	r2, [pc, #196]	; (8003e4c <TIM_Base_SetConfig+0xe8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <TIM_Base_SetConfig+0x38>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a30      	ldr	r2, [pc, #192]	; (8003e50 <TIM_Base_SetConfig+0xec>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_Base_SetConfig+0x38>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <TIM_Base_SetConfig+0xf0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d108      	bne.n	8003dae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a25      	ldr	r2, [pc, #148]	; (8003e48 <TIM_Base_SetConfig+0xe4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01b      	beq.n	8003dee <TIM_Base_SetConfig+0x8a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbc:	d017      	beq.n	8003dee <TIM_Base_SetConfig+0x8a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <TIM_Base_SetConfig+0xe8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <TIM_Base_SetConfig+0x8a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a21      	ldr	r2, [pc, #132]	; (8003e50 <TIM_Base_SetConfig+0xec>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00f      	beq.n	8003dee <TIM_Base_SetConfig+0x8a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a20      	ldr	r2, [pc, #128]	; (8003e54 <TIM_Base_SetConfig+0xf0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00b      	beq.n	8003dee <TIM_Base_SetConfig+0x8a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <TIM_Base_SetConfig+0xf4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <TIM_Base_SetConfig+0x8a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1e      	ldr	r2, [pc, #120]	; (8003e5c <TIM_Base_SetConfig+0xf8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d003      	beq.n	8003dee <TIM_Base_SetConfig+0x8a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <TIM_Base_SetConfig+0xfc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d108      	bne.n	8003e00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a08      	ldr	r2, [pc, #32]	; (8003e48 <TIM_Base_SetConfig+0xe4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d103      	bne.n	8003e34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	615a      	str	r2, [r3, #20]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800

08003e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f023 0201 	bic.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 0302 	bic.w	r3, r3, #2
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1c      	ldr	r2, [pc, #112]	; (8003f2c <TIM_OC1_SetConfig+0xc8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d10c      	bne.n	8003eda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0308 	bic.w	r3, r3, #8
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <TIM_OC1_SetConfig+0xc8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	621a      	str	r2, [r3, #32]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40010000 	.word	0x40010000

08003f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f023 0210 	bic.w	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0320 	bic.w	r3, r3, #32
 8003f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	; (8004004 <TIM_OC2_SetConfig+0xd4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10d      	bne.n	8003fac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003faa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <TIM_OC2_SetConfig+0xd4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d113      	bne.n	8003fdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000

08004008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <TIM_OC3_SetConfig+0xd0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10d      	bne.n	8004082 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800406c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a14      	ldr	r2, [pc, #80]	; (80040d8 <TIM_OC3_SetConfig+0xd0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d113      	bne.n	80040b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	621a      	str	r2, [r3, #32]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40010000 	.word	0x40010000

080040dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	031b      	lsls	r3, r3, #12
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a10      	ldr	r2, [pc, #64]	; (8004178 <TIM_OC4_SetConfig+0x9c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d109      	bne.n	8004150 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000

0800417c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f023 0201 	bic.w	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f023 030a 	bic.w	r3, r3, #10
 80041b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	621a      	str	r2, [r3, #32]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041da:	b480      	push	{r7}
 80041dc:	b087      	sub	sp, #28
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f023 0210 	bic.w	r2, r3, #16
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	031b      	lsls	r3, r3, #12
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004216:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	f043 0307 	orr.w	r3, r3, #7
 800425c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	609a      	str	r2, [r3, #8]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800428a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	021a      	lsls	r2, r3, #8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	431a      	orrs	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4313      	orrs	r3, r2
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	609a      	str	r2, [r3, #8]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2201      	movs	r2, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	401a      	ands	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	fa01 f303 	lsl.w	r3, r1, r3
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2204      	movs	r2, #4
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 f973 	bl	80045f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004320:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b06      	cmp	r3, #6
 8004332:	d007      	beq.n	8004344 <HAL_TIMEx_OCN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2204      	movs	r2, #4
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f949 	bl	80045f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004374:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b06      	cmp	r3, #6
 8004386:	d007      	beq.n	8004398 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e04c      	b.n	8004456 <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d005      	beq.n	80043dc <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d002      	beq.n	80043dc <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b30      	cmp	r3, #48	; 0x30
 80043da:	d10f      	bne.n	80043fc <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043ea:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6899      	ldr	r1, [r3, #8]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0204 	bic.w	r2, r2, #4
 800441a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6859      	ldr	r1, [r3, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800443a:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0220 	orr.w	r2, r2, #32
 800444a:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004478:	2302      	movs	r3, #2
 800447a:	e050      	b.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d018      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d013      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a18      	ldr	r2, [pc, #96]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a16      	ldr	r2, [pc, #88]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d009      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d10c      	bne.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4313      	orrs	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40010000 	.word	0x40010000
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40014000 	.word	0x40014000

08004540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004558:	2302      	movs	r3, #2
 800455a:	e03d      	b.n	80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2204      	movs	r2, #4
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	43db      	mvns	r3, r3
 800461a:	401a      	ands	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	431a      	orrs	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e03f      	b.n	80046d4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fd f80b 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2224      	movs	r2, #36	; 0x24
 8004672:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004684:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f828 	bl	80046dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800469a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e0:	b0bd      	sub	sp, #244	; 0xf4
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	68d9      	ldr	r1, [r3, #12]
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	ea40 0301 	orr.w	r3, r0, r1
 8004704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	431a      	orrs	r2, r3
 8004714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	431a      	orrs	r2, r3
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004734:	f021 010c 	bic.w	r1, r1, #12
 8004738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004742:	430b      	orrs	r3, r1
 8004744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004756:	6999      	ldr	r1, [r3, #24]
 8004758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	ea40 0301 	orr.w	r3, r0, r1
 8004762:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476e:	f040 81a5 	bne.w	8004abc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4bcd      	ldr	r3, [pc, #820]	; (8004ab0 <UART_SetConfig+0x3d4>)
 800477a:	429a      	cmp	r2, r3
 800477c:	d006      	beq.n	800478c <UART_SetConfig+0xb0>
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4bcb      	ldr	r3, [pc, #812]	; (8004ab4 <UART_SetConfig+0x3d8>)
 8004786:	429a      	cmp	r2, r3
 8004788:	f040 80cb 	bne.w	8004922 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800478c:	f7fe fea2 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8004790:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004794:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004798:	461c      	mov	r4, r3
 800479a:	f04f 0500 	mov.w	r5, #0
 800479e:	4622      	mov	r2, r4
 80047a0:	462b      	mov	r3, r5
 80047a2:	1891      	adds	r1, r2, r2
 80047a4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80047a8:	415b      	adcs	r3, r3
 80047aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80047b2:	1912      	adds	r2, r2, r4
 80047b4:	eb45 0303 	adc.w	r3, r5, r3
 80047b8:	f04f 0000 	mov.w	r0, #0
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	00d9      	lsls	r1, r3, #3
 80047c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047c6:	00d0      	lsls	r0, r2, #3
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	1911      	adds	r1, r2, r4
 80047ce:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80047d2:	416b      	adcs	r3, r5
 80047d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	461a      	mov	r2, r3
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	1891      	adds	r1, r2, r2
 80047e6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80047ea:	415b      	adcs	r3, r3
 80047ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80047f4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80047f8:	f7fb fcec 	bl	80001d4 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4bad      	ldr	r3, [pc, #692]	; (8004ab8 <UART_SetConfig+0x3dc>)
 8004802:	fba3 2302 	umull	r2, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	011e      	lsls	r6, r3, #4
 800480a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800480e:	461c      	mov	r4, r3
 8004810:	f04f 0500 	mov.w	r5, #0
 8004814:	4622      	mov	r2, r4
 8004816:	462b      	mov	r3, r5
 8004818:	1891      	adds	r1, r2, r2
 800481a:	67b9      	str	r1, [r7, #120]	; 0x78
 800481c:	415b      	adcs	r3, r3
 800481e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004820:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004824:	1912      	adds	r2, r2, r4
 8004826:	eb45 0303 	adc.w	r3, r5, r3
 800482a:	f04f 0000 	mov.w	r0, #0
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	00d9      	lsls	r1, r3, #3
 8004834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004838:	00d0      	lsls	r0, r2, #3
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	1911      	adds	r1, r2, r4
 8004840:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004844:	416b      	adcs	r3, r5
 8004846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800484a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	461a      	mov	r2, r3
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	1891      	adds	r1, r2, r2
 8004858:	6739      	str	r1, [r7, #112]	; 0x70
 800485a:	415b      	adcs	r3, r3
 800485c:	677b      	str	r3, [r7, #116]	; 0x74
 800485e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004862:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004866:	f7fb fcb5 	bl	80001d4 <__aeabi_uldivmod>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4b92      	ldr	r3, [pc, #584]	; (8004ab8 <UART_SetConfig+0x3dc>)
 8004870:	fba3 1302 	umull	r1, r3, r3, r2
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	2164      	movs	r1, #100	; 0x64
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	3332      	adds	r3, #50	; 0x32
 8004882:	4a8d      	ldr	r2, [pc, #564]	; (8004ab8 <UART_SetConfig+0x3dc>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004890:	441e      	add	r6, r3
 8004892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004896:	4618      	mov	r0, r3
 8004898:	f04f 0100 	mov.w	r1, #0
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	1894      	adds	r4, r2, r2
 80048a2:	66bc      	str	r4, [r7, #104]	; 0x68
 80048a4:	415b      	adcs	r3, r3
 80048a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80048ac:	1812      	adds	r2, r2, r0
 80048ae:	eb41 0303 	adc.w	r3, r1, r3
 80048b2:	f04f 0400 	mov.w	r4, #0
 80048b6:	f04f 0500 	mov.w	r5, #0
 80048ba:	00dd      	lsls	r5, r3, #3
 80048bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048c0:	00d4      	lsls	r4, r2, #3
 80048c2:	4622      	mov	r2, r4
 80048c4:	462b      	mov	r3, r5
 80048c6:	1814      	adds	r4, r2, r0
 80048c8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80048cc:	414b      	adcs	r3, r1
 80048ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	461a      	mov	r2, r3
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	1891      	adds	r1, r2, r2
 80048e0:	6639      	str	r1, [r7, #96]	; 0x60
 80048e2:	415b      	adcs	r3, r3
 80048e4:	667b      	str	r3, [r7, #100]	; 0x64
 80048e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80048ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048ee:	f7fb fc71 	bl	80001d4 <__aeabi_uldivmod>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4b70      	ldr	r3, [pc, #448]	; (8004ab8 <UART_SetConfig+0x3dc>)
 80048f8:	fba3 1302 	umull	r1, r3, r3, r2
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	2164      	movs	r1, #100	; 0x64
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	3332      	adds	r3, #50	; 0x32
 800490a:	4a6b      	ldr	r2, [pc, #428]	; (8004ab8 <UART_SetConfig+0x3dc>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	f003 0207 	and.w	r2, r3, #7
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4432      	add	r2, r6
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	e26d      	b.n	8004dfe <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004922:	f7fe fdc3 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8004926:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800492a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800492e:	461c      	mov	r4, r3
 8004930:	f04f 0500 	mov.w	r5, #0
 8004934:	4622      	mov	r2, r4
 8004936:	462b      	mov	r3, r5
 8004938:	1891      	adds	r1, r2, r2
 800493a:	65b9      	str	r1, [r7, #88]	; 0x58
 800493c:	415b      	adcs	r3, r3
 800493e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004940:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004944:	1912      	adds	r2, r2, r4
 8004946:	eb45 0303 	adc.w	r3, r5, r3
 800494a:	f04f 0000 	mov.w	r0, #0
 800494e:	f04f 0100 	mov.w	r1, #0
 8004952:	00d9      	lsls	r1, r3, #3
 8004954:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004958:	00d0      	lsls	r0, r2, #3
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	1911      	adds	r1, r2, r4
 8004960:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004964:	416b      	adcs	r3, r5
 8004966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800496a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	461a      	mov	r2, r3
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	1891      	adds	r1, r2, r2
 8004978:	6539      	str	r1, [r7, #80]	; 0x50
 800497a:	415b      	adcs	r3, r3
 800497c:	657b      	str	r3, [r7, #84]	; 0x54
 800497e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004982:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004986:	f7fb fc25 	bl	80001d4 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4b4a      	ldr	r3, [pc, #296]	; (8004ab8 <UART_SetConfig+0x3dc>)
 8004990:	fba3 2302 	umull	r2, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	011e      	lsls	r6, r3, #4
 8004998:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800499c:	461c      	mov	r4, r3
 800499e:	f04f 0500 	mov.w	r5, #0
 80049a2:	4622      	mov	r2, r4
 80049a4:	462b      	mov	r3, r5
 80049a6:	1891      	adds	r1, r2, r2
 80049a8:	64b9      	str	r1, [r7, #72]	; 0x48
 80049aa:	415b      	adcs	r3, r3
 80049ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049b2:	1912      	adds	r2, r2, r4
 80049b4:	eb45 0303 	adc.w	r3, r5, r3
 80049b8:	f04f 0000 	mov.w	r0, #0
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	00d9      	lsls	r1, r3, #3
 80049c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049c6:	00d0      	lsls	r0, r2, #3
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	1911      	adds	r1, r2, r4
 80049ce:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80049d2:	416b      	adcs	r3, r5
 80049d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	461a      	mov	r2, r3
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	6439      	str	r1, [r7, #64]	; 0x40
 80049e8:	415b      	adcs	r3, r3
 80049ea:	647b      	str	r3, [r7, #68]	; 0x44
 80049ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049f0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80049f4:	f7fb fbee 	bl	80001d4 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4b2e      	ldr	r3, [pc, #184]	; (8004ab8 <UART_SetConfig+0x3dc>)
 80049fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2164      	movs	r1, #100	; 0x64
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	3332      	adds	r3, #50	; 0x32
 8004a10:	4a29      	ldr	r2, [pc, #164]	; (8004ab8 <UART_SetConfig+0x3dc>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a1e:	441e      	add	r6, r3
 8004a20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a24:	4618      	mov	r0, r3
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	1894      	adds	r4, r2, r2
 8004a30:	63bc      	str	r4, [r7, #56]	; 0x38
 8004a32:	415b      	adcs	r3, r3
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a3a:	1812      	adds	r2, r2, r0
 8004a3c:	eb41 0303 	adc.w	r3, r1, r3
 8004a40:	f04f 0400 	mov.w	r4, #0
 8004a44:	f04f 0500 	mov.w	r5, #0
 8004a48:	00dd      	lsls	r5, r3, #3
 8004a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a4e:	00d4      	lsls	r4, r2, #3
 8004a50:	4622      	mov	r2, r4
 8004a52:	462b      	mov	r3, r5
 8004a54:	1814      	adds	r4, r2, r0
 8004a56:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004a5a:	414b      	adcs	r3, r1
 8004a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	1891      	adds	r1, r2, r2
 8004a6e:	6339      	str	r1, [r7, #48]	; 0x30
 8004a70:	415b      	adcs	r3, r3
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34
 8004a74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a78:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a7c:	f7fb fbaa 	bl	80001d4 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <UART_SetConfig+0x3dc>)
 8004a86:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	2164      	movs	r1, #100	; 0x64
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	3332      	adds	r3, #50	; 0x32
 8004a98:	4a07      	ldr	r2, [pc, #28]	; (8004ab8 <UART_SetConfig+0x3dc>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	f003 0207 	and.w	r2, r3, #7
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4432      	add	r2, r6
 8004aac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004aae:	e1a6      	b.n	8004dfe <UART_SetConfig+0x722>
 8004ab0:	40011000 	.word	0x40011000
 8004ab4:	40011400 	.word	0x40011400
 8004ab8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4bd1      	ldr	r3, [pc, #836]	; (8004e08 <UART_SetConfig+0x72c>)
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d006      	beq.n	8004ad6 <UART_SetConfig+0x3fa>
 8004ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4bcf      	ldr	r3, [pc, #828]	; (8004e0c <UART_SetConfig+0x730>)
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	f040 80ca 	bne.w	8004c6a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ad6:	f7fe fcfd 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8004ada:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ade:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ae2:	461c      	mov	r4, r3
 8004ae4:	f04f 0500 	mov.w	r5, #0
 8004ae8:	4622      	mov	r2, r4
 8004aea:	462b      	mov	r3, r5
 8004aec:	1891      	adds	r1, r2, r2
 8004aee:	62b9      	str	r1, [r7, #40]	; 0x28
 8004af0:	415b      	adcs	r3, r3
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004af8:	1912      	adds	r2, r2, r4
 8004afa:	eb45 0303 	adc.w	r3, r5, r3
 8004afe:	f04f 0000 	mov.w	r0, #0
 8004b02:	f04f 0100 	mov.w	r1, #0
 8004b06:	00d9      	lsls	r1, r3, #3
 8004b08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b0c:	00d0      	lsls	r0, r2, #3
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	eb12 0a04 	adds.w	sl, r2, r4
 8004b16:	eb43 0b05 	adc.w	fp, r3, r5
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	008b      	lsls	r3, r1, #2
 8004b30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b34:	0082      	lsls	r2, r0, #2
 8004b36:	4650      	mov	r0, sl
 8004b38:	4659      	mov	r1, fp
 8004b3a:	f7fb fb4b 	bl	80001d4 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4bb3      	ldr	r3, [pc, #716]	; (8004e10 <UART_SetConfig+0x734>)
 8004b44:	fba3 2302 	umull	r2, r3, r3, r2
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	011e      	lsls	r6, r3, #4
 8004b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b50:	4618      	mov	r0, r3
 8004b52:	f04f 0100 	mov.w	r1, #0
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	1894      	adds	r4, r2, r2
 8004b5c:	623c      	str	r4, [r7, #32]
 8004b5e:	415b      	adcs	r3, r3
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b66:	1812      	adds	r2, r2, r0
 8004b68:	eb41 0303 	adc.w	r3, r1, r3
 8004b6c:	f04f 0400 	mov.w	r4, #0
 8004b70:	f04f 0500 	mov.w	r5, #0
 8004b74:	00dd      	lsls	r5, r3, #3
 8004b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b7a:	00d4      	lsls	r4, r2, #3
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	462b      	mov	r3, r5
 8004b80:	1814      	adds	r4, r2, r0
 8004b82:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004b86:	414b      	adcs	r3, r1
 8004b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	008b      	lsls	r3, r1, #2
 8004ba2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ba6:	0082      	lsls	r2, r0, #2
 8004ba8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004bac:	f7fb fb12 	bl	80001d4 <__aeabi_uldivmod>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4b96      	ldr	r3, [pc, #600]	; (8004e10 <UART_SetConfig+0x734>)
 8004bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	2164      	movs	r1, #100	; 0x64
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	3332      	adds	r3, #50	; 0x32
 8004bc8:	4a91      	ldr	r2, [pc, #580]	; (8004e10 <UART_SetConfig+0x734>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd4:	441e      	add	r6, r3
 8004bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	1894      	adds	r4, r2, r2
 8004be6:	61bc      	str	r4, [r7, #24]
 8004be8:	415b      	adcs	r3, r3
 8004bea:	61fb      	str	r3, [r7, #28]
 8004bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf0:	1812      	adds	r2, r2, r0
 8004bf2:	eb41 0303 	adc.w	r3, r1, r3
 8004bf6:	f04f 0400 	mov.w	r4, #0
 8004bfa:	f04f 0500 	mov.w	r5, #0
 8004bfe:	00dd      	lsls	r5, r3, #3
 8004c00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c04:	00d4      	lsls	r4, r2, #3
 8004c06:	4622      	mov	r2, r4
 8004c08:	462b      	mov	r3, r5
 8004c0a:	1814      	adds	r4, r2, r0
 8004c0c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004c10:	414b      	adcs	r3, r1
 8004c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f04f 0100 	mov.w	r1, #0
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	008b      	lsls	r3, r1, #2
 8004c2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c30:	0082      	lsls	r2, r0, #2
 8004c32:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004c36:	f7fb facd 	bl	80001d4 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4b74      	ldr	r3, [pc, #464]	; (8004e10 <UART_SetConfig+0x734>)
 8004c40:	fba3 1302 	umull	r1, r3, r3, r2
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	2164      	movs	r1, #100	; 0x64
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	3332      	adds	r3, #50	; 0x32
 8004c52:	4a6f      	ldr	r2, [pc, #444]	; (8004e10 <UART_SetConfig+0x734>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 020f 	and.w	r2, r3, #15
 8004c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4432      	add	r2, r6
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	e0c9      	b.n	8004dfe <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c6a:	f7fe fc1f 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8004c6e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c76:	461c      	mov	r4, r3
 8004c78:	f04f 0500 	mov.w	r5, #0
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	462b      	mov	r3, r5
 8004c80:	1891      	adds	r1, r2, r2
 8004c82:	6139      	str	r1, [r7, #16]
 8004c84:	415b      	adcs	r3, r3
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c8c:	1912      	adds	r2, r2, r4
 8004c8e:	eb45 0303 	adc.w	r3, r5, r3
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f04f 0100 	mov.w	r1, #0
 8004c9a:	00d9      	lsls	r1, r3, #3
 8004c9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ca0:	00d0      	lsls	r0, r2, #3
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	eb12 0804 	adds.w	r8, r2, r4
 8004caa:	eb43 0905 	adc.w	r9, r3, r5
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f04f 0100 	mov.w	r1, #0
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	008b      	lsls	r3, r1, #2
 8004cc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cc8:	0082      	lsls	r2, r0, #2
 8004cca:	4640      	mov	r0, r8
 8004ccc:	4649      	mov	r1, r9
 8004cce:	f7fb fa81 	bl	80001d4 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4b4e      	ldr	r3, [pc, #312]	; (8004e10 <UART_SetConfig+0x734>)
 8004cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	011e      	lsls	r6, r3, #4
 8004ce0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	1894      	adds	r4, r2, r2
 8004cf0:	60bc      	str	r4, [r7, #8]
 8004cf2:	415b      	adcs	r3, r3
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cfa:	1812      	adds	r2, r2, r0
 8004cfc:	eb41 0303 	adc.w	r3, r1, r3
 8004d00:	f04f 0400 	mov.w	r4, #0
 8004d04:	f04f 0500 	mov.w	r5, #0
 8004d08:	00dd      	lsls	r5, r3, #3
 8004d0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d0e:	00d4      	lsls	r4, r2, #3
 8004d10:	4622      	mov	r2, r4
 8004d12:	462b      	mov	r3, r5
 8004d14:	1814      	adds	r4, r2, r0
 8004d16:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004d1a:	414b      	adcs	r3, r1
 8004d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	008b      	lsls	r3, r1, #2
 8004d36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d3a:	0082      	lsls	r2, r0, #2
 8004d3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d40:	f7fb fa48 	bl	80001d4 <__aeabi_uldivmod>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4b31      	ldr	r3, [pc, #196]	; (8004e10 <UART_SetConfig+0x734>)
 8004d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2164      	movs	r1, #100	; 0x64
 8004d52:	fb01 f303 	mul.w	r3, r1, r3
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	3332      	adds	r3, #50	; 0x32
 8004d5c:	4a2c      	ldr	r2, [pc, #176]	; (8004e10 <UART_SetConfig+0x734>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d68:	441e      	add	r6, r3
 8004d6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f04f 0100 	mov.w	r1, #0
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	1894      	adds	r4, r2, r2
 8004d7a:	603c      	str	r4, [r7, #0]
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	607b      	str	r3, [r7, #4]
 8004d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d84:	1812      	adds	r2, r2, r0
 8004d86:	eb41 0303 	adc.w	r3, r1, r3
 8004d8a:	f04f 0400 	mov.w	r4, #0
 8004d8e:	f04f 0500 	mov.w	r5, #0
 8004d92:	00dd      	lsls	r5, r3, #3
 8004d94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d98:	00d4      	lsls	r4, r2, #3
 8004d9a:	4622      	mov	r2, r4
 8004d9c:	462b      	mov	r3, r5
 8004d9e:	1814      	adds	r4, r2, r0
 8004da0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004da4:	414b      	adcs	r3, r1
 8004da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	008b      	lsls	r3, r1, #2
 8004dc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dc4:	0082      	lsls	r2, r0, #2
 8004dc6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004dca:	f7fb fa03 	bl	80001d4 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <UART_SetConfig+0x734>)
 8004dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	2164      	movs	r1, #100	; 0x64
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	3332      	adds	r3, #50	; 0x32
 8004de6:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <UART_SetConfig+0x734>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	f003 020f 	and.w	r2, r3, #15
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4432      	add	r2, r6
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	e7ff      	b.n	8004dfe <UART_SetConfig+0x722>
 8004dfe:	bf00      	nop
 8004e00:	37f4      	adds	r7, #244	; 0xf4
 8004e02:	46bd      	mov	sp, r7
 8004e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e08:	40011000 	.word	0x40011000
 8004e0c:	40011400 	.word	0x40011400
 8004e10:	51eb851f 	.word	0x51eb851f

08004e14 <__libc_init_array>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	4d0d      	ldr	r5, [pc, #52]	; (8004e4c <__libc_init_array+0x38>)
 8004e18:	4c0d      	ldr	r4, [pc, #52]	; (8004e50 <__libc_init_array+0x3c>)
 8004e1a:	1b64      	subs	r4, r4, r5
 8004e1c:	10a4      	asrs	r4, r4, #2
 8004e1e:	2600      	movs	r6, #0
 8004e20:	42a6      	cmp	r6, r4
 8004e22:	d109      	bne.n	8004e38 <__libc_init_array+0x24>
 8004e24:	4d0b      	ldr	r5, [pc, #44]	; (8004e54 <__libc_init_array+0x40>)
 8004e26:	4c0c      	ldr	r4, [pc, #48]	; (8004e58 <__libc_init_array+0x44>)
 8004e28:	f000 f820 	bl	8004e6c <_init>
 8004e2c:	1b64      	subs	r4, r4, r5
 8004e2e:	10a4      	asrs	r4, r4, #2
 8004e30:	2600      	movs	r6, #0
 8004e32:	42a6      	cmp	r6, r4
 8004e34:	d105      	bne.n	8004e42 <__libc_init_array+0x2e>
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
 8004e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3c:	4798      	blx	r3
 8004e3e:	3601      	adds	r6, #1
 8004e40:	e7ee      	b.n	8004e20 <__libc_init_array+0xc>
 8004e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e46:	4798      	blx	r3
 8004e48:	3601      	adds	r6, #1
 8004e4a:	e7f2      	b.n	8004e32 <__libc_init_array+0x1e>
 8004e4c:	08004eac 	.word	0x08004eac
 8004e50:	08004eac 	.word	0x08004eac
 8004e54:	08004eac 	.word	0x08004eac
 8004e58:	08004eb0 	.word	0x08004eb0

08004e5c <memset>:
 8004e5c:	4402      	add	r2, r0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d100      	bne.n	8004e66 <memset+0xa>
 8004e64:	4770      	bx	lr
 8004e66:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6a:	e7f9      	b.n	8004e60 <memset+0x4>

08004e6c <_init>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	bf00      	nop
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr

08004e78 <_fini>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr
